/* 
 *  @author Per Andersson<Per.Andersson@cs.lth.se>, Lund University
 *  To parse a CAL file use one of the methods:
 *  - public net.opendf.ir.cal.Actor parse(String path, String fileName)
 *  - public net.opendf.ir.cal.Actor parse(File file)
 *
 *  After parsing check for errors in the attribute parseProblems.
 *
 *  The parser is created using jflex and beaver.
 */
 
package net.opendf.parser.lth;

import java.util.ArrayList;
import net.opendf.ir.net.ast.PortReference;
import java.util.Map;
import net.opendf.ir.net.ast.NetworkDefinition;
import net.opendf.ir.net.ToolValueAttribute;
import net.opendf.ir.net.ToolTypeAttribute;
import net.opendf.ir.net.ast.EntityIfExpr;
import java.util.AbstractMap;
import java.io.PrintStream;
import net.opendf.ir.net.ToolAttribute;
import net.opendf.ir.net.ast.EntityListExpr;
import net.opendf.ir.net.ast.StructureStatement;
import java.util.TreeSet;
import beaver.*;
import net.opendf.ir.net.ast.StructureForeachStmt;
import java.util.Arrays;
import net.opendf.ir.net.ast.EntityInstanceExpr;
import net.opendf.ir.net.ast.StructureConnectionStmt;
import net.opendf.ir.common.*;
import net.opendf.ir.net.ast.StructureIfStmt;
import net.opendf.ir.net.ast.EntityExpr;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "NlParser.beaver".
 */
public class NlParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short NETWORK = 1;
		static public final short IDENTIFIER = 2;
		static public final short LPAREN = 3;
		static public final short RPAREN = 4;
		static public final short PORTCONN = 5;
		static public final short COLON = 6;
		static public final short IF = 7;
		static public final short THEN = 8;
		static public final short ELSE = 9;
		static public final short END = 10;
		static public final short IMPORT = 11;
		static public final short EQ = 12;
		static public final short SEMICOLON = 13;
		static public final short MAP = 14;
		static public final short LBRACE = 15;
		static public final short RBRACE = 16;
		static public final short BEGIN = 17;
		static public final short VAR = 18;
		static public final short DO = 19;
		static public final short CHOOSE = 20;
		static public final short IN = 21;
		static public final short COMMA = 22;
		static public final short LBRACK = 23;
		static public final short RBRACK = 24;
		static public final short DOT = 25;
		static public final short ALL = 26;
		static public final short EDGE = 27;
		static public final short DOUBLECOLON = 28;
		static public final short MUTABLE = 29;
		static public final short EQCOLON = 30;
		static public final short FUNCTION = 31;
		static public final short PROCEDURE = 32;
		static public final short MULTI = 33;
		static public final short OLD = 34;
		static public final short LET = 35;
		static public final short CONST = 36;
		static public final short LAMBDA = 37;
		static public final short COLONEQ = 38;
		static public final short WHILE = 39;
		static public final short ENTITIES = 40;
		static public final short STRUCTURE = 41;
		static public final short ENTITY = 42;
		static public final short ENDNETWORK = 43;
		static public final short LT = 44;
		static public final short ARROW = 45;
		static public final short BAR = 46;
		static public final short INTEGER_LITERAL = 47;
		static public final short LONG_LITERAL = 48;
		static public final short FLOATING_POINT_LITERAL = 49;
		static public final short DOUBLE_LITERAL = 50;
		static public final short TRUE_LITERAL = 51;
		static public final short FALSE_LITERAL = 52;
		static public final short CHARACTER_LITERAL = 53;
		static public final short STRING_LITERAL = 54;
		static public final short NULL_LITERAL = 55;
		static public final short PROC = 56;
		static public final short OPERATOR = 57;
		static public final short GT = 58;
		static public final short MULT = 59;
		static public final short FOREACH = 60;
		static public final short FOR = 61;
		static public final short ENDCHOOSE = 62;
		static public final short ENDFOREACH = 63;
		static public final short ENDIF = 64;
		static public final short ENDLAMBDA = 65;
		static public final short ENDLET = 66;
		static public final short ENDPROC = 67;
		static public final short ENDWHILE = 68;

		static public final String[] NAMES = {
			"EOF",
			"NETWORK",
			"IDENTIFIER",
			"LPAREN",
			"RPAREN",
			"PORTCONN",
			"COLON",
			"IF",
			"THEN",
			"ELSE",
			"END",
			"IMPORT",
			"EQ",
			"SEMICOLON",
			"MAP",
			"LBRACE",
			"RBRACE",
			"BEGIN",
			"VAR",
			"DO",
			"CHOOSE",
			"IN",
			"COMMA",
			"LBRACK",
			"RBRACK",
			"DOT",
			"ALL",
			"EDGE",
			"DOUBLECOLON",
			"MUTABLE",
			"EQCOLON",
			"FUNCTION",
			"PROCEDURE",
			"MULTI",
			"OLD",
			"LET",
			"CONST",
			"LAMBDA",
			"COLONEQ",
			"WHILE",
			"ENTITIES",
			"STRUCTURE",
			"ENTITY",
			"ENDNETWORK",
			"LT",
			"ARROW",
			"BAR",
			"INTEGER_LITERAL",
			"LONG_LITERAL",
			"FLOATING_POINT_LITERAL",
			"DOUBLE_LITERAL",
			"TRUE_LITERAL",
			"FALSE_LITERAL",
			"CHARACTER_LITERAL",
			"STRING_LITERAL",
			"NULL_LITERAL",
			"PROC",
			"OPERATOR",
			"GT",
			"MULT",
			"FOREACH",
			"FOR",
			"ENDCHOOSE",
			"ENDFOREACH",
			"ENDIF",
			"ENDLAMBDA",
			"ENDLET",
			"ENDPROC",
			"ENDWHILE"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjctTyL4NNny$SRKdOK4rHH56HW2W62tPH8218w20WlNUaYVHUbTv5cZI188WLUy46Th0" +
		"NxEsnF8#zSfxVd3kxU$VUJNQ1v$t3pylcS#wScJaptpdJRx8XAhsAwj1QPYghPj41ylElhD" +
		"GAogSbr8iQqSkqZrwa4VG7rQ8or5uzHvVJ9RI6hgJBw0Awb2vMpz9LD8ncqpWgHn#eov1$X" +
		"SclJe$IO$GuFK5FqbEqbvwcP#WMEfVEe$FfEcgdkH9UI0TK0sfCIrLroeTexXZQfohp9irL" +
		"Lu1RoSqbAyfjhhcgXZfVrQ29L4JpatFLcUeKTIQu0wa3AteF$bRHN3KU$hwDkEPUJEsHxkR" +
		"MYd1v8tr0jMc4QgCULRtvxvJyBQBtZRzsUZxYsj$TyFSIDKhwkGcuyTGXTAqQ6VNtMN1Z#T" +
		"MGdvpx86sbBHZVNBgF7iP8vn$#M$nT0Ny3$8fmxm5tC5LmiQj6kUU0Un6TG5cKJJbq8fsK0" +
		"hUpQ0Uedmurb#wESliQxlKUVskgKsXpb9i7xcWwbKwZqwa7$Ok#Iu5x9ZLJYy7zK59EmRow" +
		"HxXJqSzJo9vNrtYuzSYd3aIvtuDRn5FKRbLDLUEHF3AbyIrI#y5jHeKy7BCsdz8ZuqkBrFF" +
		"2FS73BK2vPL7k6PZFEUea2j4cDO5QA5zAtAsqWmxm592xQAxgBjptu6#XwYBzlCd3ROZMDl" +
		"5mIw6sktWgHYgrzRiP$khmVV7tE#5cmjzcr5#ufJtSbkZNdzrS$aKpK#HknkY0gqwdF7M6W" +
		"xk7zl54rKwuUHvkJ$XxdSVVAPgfxgQkANABu6yFr5v3k7aoh#w3ltzXf19pXw9CPGztbd3r" +
		"BfSAzseUJdLLAreFZrjXV0S9Tn2q4x2kfeARZtro1UYrL2tkhaRmkz16qErHRdoRnc8z5y$" +
		"LJ5khYneZUrLJOLv8qv2cMrPB1Jo#piIEs2lA$DEpaoNVcq#Wd#5HNTLHLQ4sSXP97zD2#F" +
		"sfAgCwW3l8mxqDTXqZN3L2NOe#hqMjL0YZiadbfpYNYy2jWnATQ23gwoFSpupTRwYlcuUxJ" +
		"iebxkD7qFBa$jwaEgj#L9S$mfurMeyj$Mx6zZVgpW#eiLIBt$5m3yB7fuhX7ag5optKHUZX" +
		"kgepzQRVPKwTOtFva7f4jQT1uDxluVuDRlN4N9L69SrbxMixbKS3m7mCAt6rkYqwjdbgaPe" +
		"1NU#FZxkPwbmrLyqkXda1JqZ2tAWsqFrWFgrUe0ay6ypnmfm4vYlgvMAOjS6yfHZcLSdyf1" +
		"aqXoPWxToC6JLFbG5phZ0NO7OljltqxXEg4QppYc5svH59c1jeeweAvdPr9zsXge6vKvZRw" +
		"4wwbtO9Su#7EG0ZiQCOvk2aVZv03w75TUbvQVacC5yGvgk8lKNlqaTWVk9XBe3r5yKmL$A7" +
		"IPXVqjUg3yPpcrf7twgNC6$R2xCY$KZ$KVUhHp6UPJtC9zKMdXFT7wvL#gPOHB#gk$alsiI" +
		"BaioXX#4FzWRqrIcAb1$CqcRV7qqtqYYw2SmWzjzipEHIs8s7mw82RCkftAYVjQAs8sY2Ef" +
		"5AkazePaLrCis3dwVgkuoSwMU9dsAXQk8kKqijXv$Jr7bg4hYJwHnr9Thbd4Ddg7Nwh57rL" +
		"7lL4EaLap2RuQSfcCtHTjr7#Qg5#DawvgUSCzcgfMeBF#tUhqM7LQUOd#fwx4nvgeVggVgf" +
		"lgf$al7CW#qDO0wDd3DgcCFFuUf6cma$nr1zzOoScFcWZ5FJekCv2$7fQgQwHyrNSoYeRax" +
		"YvqEmcm$cl2ZpGM6ccRW#HPV0psLesrhf$$NgThLBRLBHUwcQYXcuNDq1vdQrL6r5$vVCtA" +
		"QAr5rWtek#VK36qsPcEERG7ZE7zgedL1OVvbbg5#RSIuxnV576SvzwLRr6#bDotzgVkaIuK" +
		"UjFFaGpoJsUI6a0gzF4efPAnpCsRzsV59dHUmF5nXFwDMOyOnzXYXR7vBx$CoObPgghZy7F" +
		"6r9WKXpJvgvsC2DMH#mdxgjI6tOkUpppZLM4#RgfDn$x0Rdx5lkM$gnAYHcv1vAyKv7Rp#W" +
		"#X8z2ZLW7#QgRbtb4VHiRpoHCDKIjiPdHce#PAUyWBgPwWXBDeSs9vgrQU1H#9fctwjOeC#" +
		"5QEQg#FQArSfpv3sPwzo6AOte$gJ9ZNjZxKEHpd7cSUPnvd7cS#KzaEj#TdoDzzsX6Fz7dz" +
		"1fzGojAo5sEt7#NaB#$nDAlU7BVSEI#MMBPTqhC$RZ4tAzApFsXnDnVIifLvKl8NUdvsvA#" +
		"xLuU7PtMhlp97ljSs1T4p9L#AwWIVTFJd#bg9r7qRoUKWEVyQyxPfbJOEKLKOoeVFsdKsUw" +
		"$reX7RHFKhgqjF2f1k9ZyJ3fPmen4jQhw1dfMWbnTIYL8r##nOSVxGEJZlLUvFwkIMkYFlK" +
		"8iyk4d0s68RaPg1i8mdgMf35MWSkYrREdTJFHk3XMWLGtnvjk86jErr8GsOZpEe2fq9jMWF" +
		"8nqBD#7#lFHLisuW2wasdGH#keI#6R$RLLpTPW3teaqbEfH8RY5mWqBju9m2s5XURWgokqa" +
		"t05K5J8OjeDJu4v1hLF0lH7S3Fo4gOrmEu2RZhZcPg2ki8UR5ULM46usreM5jU1FoTySx66" +
		"sltPw677DBGItBjQHvWOJz79PsXBbJW8tFZyvDqWJQ2AutR43Xv4IfXt23O7hC$uMWJkPXd" +
		"lO4MuskBaqbQRHT9f1CsbMIbojXKoekRuejwpXvYRmLuzvX5i0RXkiIltR$feoEicvOMgAb" +
		"HoY7f8o8ZglseDxFImqzvG4N8l6HxbNWfk3rlL7geNnzQSqlZbOmo6X1yNVG7Hy5z9suPPF" +
		"mCsXTL5k9N1FfShWMJHIThLKkFRuLXIovWQ5cm7kSiGqrqh8tUpX1iLhwuZMhmwl4gwzRym" +
		"3LxT4S#Sdv9A7Ir9ZQjmSZ4wEpA82hCCOrqAA7xDSSmiISc$mS7iRRkuHS6kYPhzm2uHx6h" +
		"XPPfzCpCqiXgjtkLIu5iOb9FEmGBWXiux2gC62zrdGTCiAe5M4bHx3B3nFTgoZ#3QLDAyqq" +
		"zPqZP6zggmmWtGrqdJBxBtPM#zenzxipatkQtaPqH3THfrHLoZQnxt4Julk03UKW1l6xJ32" +
		"rJjPZeo85WjzdVfSrYLoQJtgso3S#iPEz$6m15nThhW#BaXfZxJ4NtzqxTOnOvk1TfGL7nB" +
		"jaJde$MFX#ca9UbZFgJ8WQculmysaCGWrj#mHSgqaSwexpkYo88n5BUboxjfZMq1ziJ8BPF" +
		"tCJi3KlzylZbdIlcoV1PaoZyRYwKDFXccWCFrWRgLjHyLCvcSGPNnW3aIzFkdREOPPdXOPF" +
		"nFl4mL7xMSXBBIVXM3a2jC#yx9bFyWjuGmuwwZzd0H6WSoO7BClPPXpfu3wuAS2c8iJCdiS" +
		"jPyLgAVuQL4fQ9fPHfZb4QiWQoaByzhBF0bz465Me#foLW#H7TN2ALqoCrj6AoHpFrkObjd" +
		"t8pUJBEnrETGHTjdmlYiiXi1MjoV2p8hQwdau4BObCotC6P$u6TaNRAPj4SHT9WjtcHpine" +
		"NK1TnkgBUJ6U7OMLDApffiEHiBq4V9cFhE4PAve$ieZ1knPleSVeR5pqpqc#rd6TanHplyB" +
		"2kpeX0s5cxOuIJC0lnq03CzUivqSFZPHywniFYPIsdOcVJv44PQ1yph25EFUNlm2kKDy9Qa" +
		"ytQrZ7u8Eq24sL#OWqnSdw8LOA7dSORq$ohgH#DGDdQEjqViUgGMWjW5wTsIzcq$CsyByMC" +
		"vcB6#jSmSqhbTvRrid9pziV4SB#EPYtVSGiQdP2RBXq8GspeC0HDFrtWY9HtILImmddX6nv" +
		"DTdvIPfczjfXs3RkugZlg4ALeSatB$LqpnAG7pMFoaSv8p8JckEd4QnPWHgwFmqpAr1SruX" +
		"esLOMAbP1aBqmAddtIQf5HDoKzp3uGTra5i3aN7q#n3KbCNI3VRH#zu7fMVIPZmqp2ZDHyx" +
		"KsBnJ3DVN7D8tp6zpF#BUKjf4MRYjN9KVXxHMZdE$ESolVkGAUNOXuwEwV12zg5eod7cSUP" +
		"nvd7cSUO$aUbwTsQvXr5pQa4jgLMIt1x7LFh$Ksx2dEZejFRy1iCTxnvl3#dCvarFKdhHS8" +
		"w#wK7pyfn$pMbjIisDcoCZQAbhrYmenYDFgbWtXonBv4qadpObzjRP6tHxiQMzfT8bFSokZ" +
		"$TUvR6ecin2hEmLGkhW9Fklg1sWJvCSehyXQn5$ZYWm7k4sej3RH9Q5U4kO$8xy4E8eRzNN" +
		"vUqw0fz6zE84TMqtuHTsQ6sEpuVFf3gZhfE8qkOWR8sqwaI#ts2xmfJv7EdpaBytCOFM8nz" +
		"jfyDsFErmV7xGYezRhvhqoo5D8JT2$eJiWfirJTxNU3nfwlyHxGdOkgyDsliWxAf0RmT9Wr" +
		"mCgH$F2C4dLSsK6MRwu6Em1vgq#upT2iY5YF#0y3NzrtrZ2v$zaVA$mAUmiHy2lG5HUW1rd" +
		"O6yyWYx9EYJAs47DHrjymytTSw7VXFiNuAy5M$ltmXx#1LOQ#8p85kDliEKNm1zDsGJoXVg" +
		"11Tpjmc$Csrz4tN#X71xp2Qz9ieUC7x15$z7fkuB8ACGVyqmtu5KCNdxeR#147taVpUUQVL" +
		"4ck7vEq9#Cctu1hgPF#bz8NNSVLISe0#oT8XvVnXw9SDPXJZc266k12ex$BaT$ds2jfr5LB" +
		"eB4YQQDlV6OrHylUdlOLvXx08LaOzolYOkNtOWhm1v7q2Q6ZykHNebL$jQ8GthnMfl#h4sz" +
		"BO8vyJR#NSY7MEUaGrk6F7pK7OAme6EkfQRS2NAOq$8m7eCOipycv6s2E67hZQc8tqLGkJv" +
		"dZ9bNuLiCBhsuNwZxuFiD#NgGN$9reDxy9ZjQkihaA#CBVeWS22MftHRNaVRi3y4AvYwpNh" +
		"8s8j#7OOGOqLJd7KQkvTD#1dQEvoe5DP32FF1X#G0niFtiCFs1piiXVhIHvks#arerdy070" +
		"lpEbZQf9T17OyZp8MKYzNbUmpn4urkzYM5DfGgmfemSog0zHjqpAL0VSJD#WzYVoc5FI2zo" +
		"8w7AwFSTQWBOn$4Fknx6lLzQlhh8D8kDYoiOH$MHF0Aqw$kDMgPCeSCfowaAyhyXR2TITDp" +
		"e1a4$HJiQT9wcNPWZgGjZDKN78t7hmYdnTB2Is23DUkx1lppZU$dmsQ6QHFwBu1w$96wOH#" +
		"SOtJChU0oey#2x7QstwIlG$id6pyc8cxsqa0ln1z2VA#ZJyT1Ujjwsan76x47fjyDMvmRmS" +
		"SSTUivsmdXan2zxs1D1yqS2kvqr3lHrQ#oNh57Z3NvxvioPWu4MzbXvbZqnMsGzLw$Q8axp" +
		"MkJkShO$fqudypvHK#XB$8GBZNbThdiSEPR7OhdKEEORlLmvi77ZnENKPV0TZ72aGYnlwcx" +
		"4EutPLvps7LqS7mcxLlOOerdtcJQUz3LdjB8$z75qtjMbVWqIzyTDXdzQuVj1wxwfjkXxm$" +
		"OOTxuq1#1ndPQe6jY$opiftw4$apZqs#chRFqVfp0$bszByVY$hech6xA$s7ilaVxi1Vugy" +
		"QN3vkxMkO0Ksu4sfc3S5JCHky7$YacVxdBnv7nSR#PEygiPVywRvkfdQlC6eTkpcPVD$Svd" +
		"8h0dqzZUk1Ha#OQKv##eno2pxXx#lKTw6dJ1#MWF#EoNGrVIfdyoiXVxMhxMoRlNEW$6nxs" +
		"JVyVthPbuhuKKAPjE2ipSRy9b8ctYTmRVTWN0hWtPfezj7HfRts1XiOMz#X0TzX#RsmzyyJ" +
		"mSNS9c3qxED1LLpE7NizRDhZPdMROBnIJlixq3#wGFdEE1fQOj0hGro2iWxn#YSeR#zd6Nl" +
		"VJHhH$WV63lRP#d161NRQkp9qbiDXHrxtnzd9nnSSAnTAiNGxxROwwPoB#kKa$bA2TUnoss" +
		"Ey3Vnhz2UWuym9V6hllOpgT7L#7px7UtEyIWQd6hqeEcr8eSz1H$jsOxiyoDjacZdqlM11V" +
		"Px1UVDoltqqQuzxoR2mjJSNq0DwLWZNSlfkwQhlYJHBRgQe9oWvAREipO#rpd9k1lCWT0Ec" +
		"$k#hESDNRmTYzxaYRxx0$I0a$yXvgQtVpRlwD$#2V#4V#WV$3$#Od#Gd#bl$5t$1toF#Ql#" +
		"8l4Qw3uCsMBvDIyb#Ht9ilvKluOhw8QxDysvlhS1##YgzW$R#7LtDhnfxABUF8BHXd13SNl" +
		"Pb9gmJ1JPvpk0ANbtpi2LmeUKqWrnexZ1nV8rf3ReHdVz7xcTmjl85lv$MClOnnB#3ezybv" +
		"CATpcj47oRC#f9vem$a6F8ToWFsiU0ZJuSF6iXPV9s5RURRXgH9EuibuJelMFOx7ydJHnij" +
		"pj3pnRiYZk2jtuSxSYJlozTo1stCx7eE#aUzpyxdH6ceUPWcLFC$H8P$DfJZ3vEju3VQn5O" +
		"sT9S$gN8PBcvHg9ipZJ3RVUkSp8JWB#LG#3SyJJ6eLoEcGKxWoPt6MALSLifdl48iLybpEj" +
		"#AvKlHoN9Q7YNOUumsRB#3pewqV2C6R7Citpha1XpZ80xWddsZoJuRW3Okp6VTwnjd0Q$Xx" +
		"$em$uK$vSsFpiGaFyVlyWMZtGVQOr7lbUGy$AE4RyZp0RvBZm#$9ysqJUmjoa5$dB$WLVeb" +
		"VvbUZTY$oiunp2y#z$0m$9sbFyVCczmMM$qHdl47nVj7syICIFYxFn#JvA6$3Soi$p0$ndx" +
		"mG#dnUXkTI2ExVl9WNYDqktiax#4veso4xkOZlYclp39xBD$CjqERnJFd$0ltj#vj94T8WY" +
		"fQAM3GNyRdGSQ935EsWJ1gEq2tBH2pQ1BjDqAT17o6YH9QBM8ItG8YYwV9j7p$f4L#1kFu$" +
		"y1iGTg20V2Dd2#9R9EwJj5kXtmfz9SAL26#4T8FU3VNeD$Okq6V8js824By9GpGAwQEGZbK" +
		"1KVBDcVR8wuloKn7NCXFsCob8iv2kvz8gf6cvJKH$wvCWYhgZp6ZOQfc7k9RL8Zx26m54qH" +
		"ZOZq5yjdpdHa5yr1MX$aPDPwJrW5qFX1sH5f6sYBT5dRRek4#a3VGsoBiEUZj8VyJrDy9jy" +
		"P7UJmOXRPo8ZxOY7VC3ecWyT8mzHD56vAr1k0RX18GJv1jxYl3M1L7oxJtz$#r5HYz4F#Xm" +
		"BU9hvPjsjYn0dODXDnZfs2aXYkQWt$H$QYz4ta2K6oZVF4oZzSXRZpAJ8SEGrnhnrj27mdO" +
		"eTBnPG1HT2qv3XCda6X4V942DeDjYGKBo$nwD95s7VgC7QGCO6yJEBt4xtJ9s5ZL0NWE4ZH" +
		"4sXarZf6kzYOZ#TfZoo00HYwOWd0AR5YZN0l4MeWSX0KZ8fQSRkm0rHzXSmY0av0ZJ8EdK3" +
		"FdDaA#$mw$$Yo0Mfa7IgHEudS1gYb3BEYCzZGmnqiT8RoDBZ2moijY8FY5R8cmbOj6T$mKR" +
		"wi84");

/*******************************************************
 *  Inject code for custom error handling in the parser class.
 *******************************************************/
  // all errors encountered during parsing is stored in the array parseProblems. This includes lexical, syntactical and semantic error (multiple initialization actors et.c.)
  public java.util.TreeSet<String> parseProblems = new TreeSet<String>();
  public void newError(String msg, Symbol token){
      parseProblems.add(msg + " At row " + Symbol.getLine(token.getStart()) + ", column " + Symbol.getColumn(token.getStart()));
  };
  public void printParseProblems(){ printParseProblems(System.err); }
  public void printParseProblems(PrintStream out){
    out.println("number of problems: " + parseProblems.size());
    for(String msg : parseProblems){
      out.println("ERROR: " + msg);
    }
  }

  // parser plug-in methods that are called when the parser encounters a syntactical problem
  class Events extends Parser.Events {
    public void scannerError(Scanner.Exception e) {
      parseProblems.add(e.getMessage());
    }
    public void syntaxError(Symbol token) {
      // This method is always called when a problem is encountered, even if it is repaired.
      // beaver.Parser$Exception is thrown if recovery fails.
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("unexpected token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void unexpectedTokenRemoved(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after removing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void missingTokenInserted(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after inserting token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void misspelledTokenReplaced(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after replacing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void errorPhraseRemoved(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after removing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
  }

  {
    // initialization, before the constructor
    report = new Events(); // Use error handler in parser
  }

/*******************************************************
 *  Help routine that parses a file, given its name.
 *  A compilation unit is always returned, containing all parseProblems encountered during parsing.
 *  If a Parser.exception is thrown a CompilationUnit with an empty AST is returned.
 *******************************************************/

  public NetworkDefinition parse(String fileName){
    return parse(new java.io.File(fileName));
  }
  public NetworkDefinition parse(String path, String fileName){
    return parse(new java.io.File(path + "/" + fileName));
  }
  public NetworkDefinition parse(java.io.File file){
     NetworkDefinition network;
     parseProblems = new TreeSet<String>();
     java.io.FileReader fr = null;
     try {
       try {
         fr = new java.io.FileReader(file);
	       NlScanner scanner = new NlScanner(new java.io.BufferedReader(fr));
         network = (NetworkDefinition)parse(scanner);
         fr.close();
       } catch(CalParser.Exception e) {
         // build empty compilation unit for failed error recovery
         // The problem is added to parseProblems[] by the syntaxError() method added to the parser above.
         network = new NetworkDefinition(file.getName());
       } finally {
         if(fr != null){ fr.close(); }
       }
     } catch (java.io.FileNotFoundException e){
       parseProblems.add("file not found: " + e.getMessage());
       network = new NetworkDefinition(file.getName());
     } catch (java.io.IOException e){
       parseProblems.add("error reading file: " + e.getMessage());
       network = new NetworkDefinition(file.getName());
     }
//     network.setSourceFile(file);
//     network.parseProblems = parseProblems;
//     for(Problem p : parseProblems) {
//       p.setSourceFile(file);
//     }
     return network;
   }

  private enum NetworkBodyPartKind{ IMPORT, VAR_DECL, ENTITIES, STRUCTURE, TOOL_ATTRIBUTE; }

/******************************************************************************
 * Needed by CommonParser.beaver
 * Repeated in both NlParser.beaver and CalParser.beaver
 *****************************************************************************/
   private GeneratorFilter makeGeneratorFilter(TypeExpr type, ArrayList varList, Expression e, ArrayList filterList){
    DeclVar[] vars = new DeclVar[varList.size()];
    for(int i = 0; i<varList.size(); i++){
      Symbol symbol = (Symbol)varList.get(i);
      vars[i] = new DeclVar(type, (String)symbol.value, null);
    }
    Expression[] filters = filterList == null ? new Expression[0] : (Expression[])filterList.toArray(new Expression[filterList.size()]);
    return new GeneratorFilter(vars, e, filters);
  }
  class ParenthesSymbol extends Symbol{ // used by the parser to wrap subexpressions that are enclosed by parentheses, i.e. do not add them to a ExprBinaryOp sequence.
     ParenthesSymbol(Symbol s){
       super(s.getId(), s.getStart(), s.getEnd(), s.value);
     }
  }

	public NlParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 4: // lst$network_body_part = network_body_part
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 5: // lst$network_body_part = lst$network_body_part network_body_part
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 10: // network = NETWORK IDENTIFIER.name opt$type_parameter_block.typePars LPAREN opt$actor_parameter_list.valuePars RPAREN port_decl_list_opt.inputPorts PORTCONN port_decl_list_opt.outputPorts COLON opt$lst$network_body_part.body end_network.end_network opt$SEMICOLON
			{
					final Symbol name = _symbols[offset + 2];
					final Symbol _symbol_typePars = _symbols[offset + 3];
					final ArrayList typePars = (ArrayList) _symbol_typePars.value;
					final Symbol _symbol_valuePars = _symbols[offset + 5];
					final ArrayList valuePars = (ArrayList) _symbol_valuePars.value;
					final Symbol _symbol_inputPorts = _symbols[offset + 7];
					final CompositePortDecl inputPorts = (CompositePortDecl) _symbol_inputPorts.value;
					final Symbol _symbol_outputPorts = _symbols[offset + 9];
					final CompositePortDecl outputPorts = (CompositePortDecl) _symbol_outputPorts.value;
					final Symbol _symbol_body = _symbols[offset + 11];
					final ArrayList _list_body = (ArrayList) _symbol_body.value;
					final Map.Entry[] body = _list_body == null ? new Map.Entry[0] : (Map.Entry[]) _list_body.toArray(new Map.Entry[_list_body.size()]);
					final Symbol _symbol_end_network = _symbols[offset + 12];
					final String end_network = (String) _symbol_end_network.value;
					
        NamespaceDecl ns = null;
        ArrayList varDecls = new ArrayList();
        ArrayList structure = new ArrayList();
        ArrayList<java.util.Map.Entry<String,EntityExpr>> entities = new ArrayList();
        ArrayList<ToolAttribute> toolAttributes = new ArrayList();
        for(Map.Entry part : body){
            ArrayList all = (ArrayList)part.getValue();
            if(all != null){
                switch((NetworkBodyPartKind)part.getKey()){
                case IMPORT:
                     System.out.println("UNSUPPORTED, import is ignored.");
                     //TODO
                     break;
                case VAR_DECL:
                    varDecls.addAll(all);
                    break;
                case ENTITIES:
               	    entities.addAll(all);                 
                    break;
                case STRUCTURE:
                    structure.addAll(all);                 
                    break;
                case TOOL_ATTRIBUTE:
                    toolAttributes.addAll(all);
                    break;
                }
            }
        }
        
        return new Symbol(new NetworkDefinition((String)name.value, 
                          ns, 
                          typePars == null ? new ParDeclType[0] : (ParDeclType[])typePars.toArray(new ParDeclType[typePars.size()]),     // typePars,
                          valuePars == null ? new ParDeclValue[0] : (ParDeclValue[])valuePars.toArray(new ParDeclValue[valuePars.size()]), // valuePars,
                          new DeclType[0],      // typeDecls, NOTE, can not be expressed in NL
                          (DeclVar[])varDecls.toArray(new DeclVar[varDecls.size()]),             // varDecls
                          inputPorts, outputPorts,
                          (Map.Entry<String,EntityExpr>[])entities.toArray(new Map.Entry[entities.size()]), // entities
                          (StructureStatement[])structure.toArray(new StructureStatement[structure.size()]), // structure
                          (ToolAttribute[])toolAttributes.toArray(new ToolAttribute[toolAttributes.size()])
                          ));
			}
			case 11: // network_body_part = import_part.part
			{
					final Symbol _symbol_part = _symbols[offset + 1];
					final ArrayList part = (ArrayList) _symbol_part.value;
					 return new Symbol(new AbstractMap.SimpleEntry(NetworkBodyPartKind.IMPORT, part));
			}
			case 12: // network_body_part = network_decl_block.part
			{
					final Symbol _symbol_part = _symbols[offset + 1];
					final ArrayList part = (ArrayList) _symbol_part.value;
					 return new Symbol(new AbstractMap.SimpleEntry(NetworkBodyPartKind.VAR_DECL, part));
			}
			case 13: // network_body_part = entities.part
			{
					final Symbol _symbol_part = _symbols[offset + 1];
					final ArrayList part = (ArrayList) _symbol_part.value;
					 return new Symbol(new AbstractMap.SimpleEntry(NetworkBodyPartKind.ENTITIES, part));
			}
			case 14: // network_body_part = structure.part
			{
					final Symbol _symbol_part = _symbols[offset + 1];
					final ArrayList part = (ArrayList) _symbol_part.value;
					 return new Symbol(new AbstractMap.SimpleEntry(NetworkBodyPartKind.STRUCTURE, part));
			}
			case 15: // network_body_part = tool_attribute_block.part
			{
					final Symbol _symbol_part = _symbols[offset + 1];
					final ArrayList part = (ArrayList) _symbol_part.value;
					 return new Symbol(new AbstractMap.SimpleEntry(NetworkBodyPartKind.TOOL_ATTRIBUTE, part));
			}
			case 16: // lst$network_decl = network_decl
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 17: // lst$network_decl = lst$network_decl network_decl
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 20: // network_decl_block = VAR opt$lst$network_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayList _list_d = (ArrayList) _symbol_d.value;
					final DeclVar[] d = _list_d == null ? new DeclVar[0] : (DeclVar[]) _list_d.toArray(new DeclVar[_list_d.size()]);
					 return _symbol_d;
			}
			case 21: // network_decl = var_decl.d SEMICOLON
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 22: // network_decl = fun_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 23: // network_decl = proc_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 24: // lst$entity = entity
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 25: // lst$entity = lst$entity entity
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 28: // entities = ENTITIES opt$lst$entity.l
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final java.util.Map.Entry[] l = _list_l == null ? new java.util.Map.Entry[0] : (java.util.Map.Entry[]) _list_l.toArray(new java.util.Map.Entry[_list_l.size()]);
					 return _symbol_l;
			}
			case 29: // entity = IDENTIFIER.ID EQ entity_expr.e SEMICOLON
			{
					final Symbol ID = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final EntityExpr e = (EntityExpr) _symbol_e.value;
					 return new Symbol(new java.util.AbstractMap.SimpleEntry((String)ID.value, e));
			}
			case 34: // entity_expr = IDENTIFIER.id LPAREN opt$param_assign_list.l RPAREN opt$tool_attribute_block.a
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 3];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final ArrayList a = (ArrayList) _symbol_a.value;
					 return new Symbol(new EntityInstanceExpr((String)id.value, l == null ? new Map.Entry[0] : (Map.Entry[])l.toArray(new Map.Entry[l.size()]),
                                                                                                                          (ToolAttribute[]) (a==null ? new ToolAttribute[0] : a.toArray(new ToolAttribute[a.size()]))
                                                                                                                         ));
			}
			case 35: // entity_expr = IF expression.e THEN entity_expr.t ELSE entity_expr.f end_if
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final EntityExpr t = (EntityExpr) _symbol_t.value;
					final Symbol _symbol_f = _symbols[offset + 6];
					final EntityExpr f = (EntityExpr) _symbol_f.value;
					 return new Symbol(new EntityIfExpr(e, t, f));
			}
			case 38: // entity_expr = LBRACK opt$entity_expr_list.e RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ArrayList e = (ArrayList) _symbol_e.value;
					 return new Symbol(new EntityListExpr((EntityExpr[])(e==null? new EntityExpr[0] : e.toArray(new EntityExpr[e.size()])), null));
			}
			case 39: // entity_expr = LBRACK entity_expr_list.e COLON for_generator_list.g RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ArrayList e = (ArrayList) _symbol_e.value;
					final Symbol _symbol_g = _symbols[offset + 4];
					final ArrayList g = (ArrayList) _symbol_g.value;
					 return new Symbol(new EntityListExpr((EntityExpr[])(e==null? new EntityExpr[0] : e.toArray(new EntityExpr[e.size()])), (GeneratorFilter[])g.toArray(new GeneratorFilter[g.size()])));
			}
			case 40: // param_assign_list = param_assign.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Map.Entry p = (Map.Entry) _symbol_p.value;
					 ArrayList l = new ArrayList(); l.add(p); return new Symbol(l);
			}
			case 41: // param_assign_list = param_assign_list.l COMMA param_assign.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final Map.Entry p = (Map.Entry) _symbol_p.value;
					 l.add(p); return _symbol_l;
			}
			case 42: // entity_expr_list = entity_expr.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final EntityExpr e = (EntityExpr) _symbol_e.value;
					 ArrayList l = new ArrayList(); l.add(e); return new Symbol(l);
			}
			case 43: // entity_expr_list = entity_expr_list.l COMMA entity_expr.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final EntityExpr e = (EntityExpr) _symbol_e.value;
					 l.add(e); return _symbol_l;
			}
			case 44: // param_assign = IDENTIFIER.ID EQ expression.expression
			{
					final Symbol ID = _symbols[offset + 1];
					final Symbol _symbol_expression = _symbols[offset + 3];
					final Expression expression = (Expression) _symbol_expression.value;
					 return new Symbol(new java.util.AbstractMap.SimpleEntry((String)ID.value, expression));
			}
			case 45: // lst$entity_statement = entity_statement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 46: // lst$entity_statement = lst$entity_statement entity_statement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 49: // structure = STRUCTURE opt$lst$entity_statement.l
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final StructureStatement[] l = _list_l == null ? new StructureStatement[0] : (StructureStatement[]) _list_l.toArray(new StructureStatement[_list_l.size()]);
					 return _symbol_l;
			}
			case 50: // entity_statement = entity_port.src EDGE entity_port.dst opt$tool_attribute_block.a SEMICOLON
			{
					final Symbol _symbol_src = _symbols[offset + 1];
					final PortReference src = (PortReference) _symbol_src.value;
					final Symbol _symbol_dst = _symbols[offset + 3];
					final PortReference dst = (PortReference) _symbol_dst.value;
					final Symbol _symbol_a = _symbols[offset + 4];
					final ArrayList a = (ArrayList) _symbol_a.value;
					 return new Symbol(new StructureConnectionStmt(src, dst, (ToolAttribute[])(a==null ? null : a.toArray(new ToolAttribute[a.size()]))));
			}
			case 51: // entity_statement = for_generator_list.g DO opt$lst$entity_statement.s END
			{
					final Symbol _symbol_g = _symbols[offset + 1];
					final ArrayList g = (ArrayList) _symbol_g.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final StructureStatement[] s = _list_s == null ? new StructureStatement[0] : (StructureStatement[]) _list_s.toArray(new StructureStatement[_list_s.size()]);
					 return new Symbol(new StructureForeachStmt((GeneratorFilter[])(g.toArray(new GeneratorFilter[g.size()])), s));
			}
			case 52: // entity_statement = IF expression.e THEN opt$lst$entity_statement.t_stmt END
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_t_stmt = _symbols[offset + 4];
					final ArrayList _list_t_stmt = (ArrayList) _symbol_t_stmt.value;
					final StructureStatement[] t_stmt = _list_t_stmt == null ? new StructureStatement[0] : (StructureStatement[]) _list_t_stmt.toArray(new StructureStatement[_list_t_stmt.size()]);
					 return new Symbol(new StructureIfStmt(e, t_stmt, null));
			}
			case 53: // entity_statement = IF expression.e THEN opt$lst$entity_statement.t_stmt ELSE opt$lst$entity_statement.f_stmt END
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_t_stmt = _symbols[offset + 4];
					final ArrayList _list_t_stmt = (ArrayList) _symbol_t_stmt.value;
					final StructureStatement[] t_stmt = _list_t_stmt == null ? new StructureStatement[0] : (StructureStatement[]) _list_t_stmt.toArray(new StructureStatement[_list_t_stmt.size()]);
					final Symbol _symbol_f_stmt = _symbols[offset + 6];
					final ArrayList _list_f_stmt = (ArrayList) _symbol_f_stmt.value;
					final StructureStatement[] f_stmt = _list_f_stmt == null ? new StructureStatement[0] : (StructureStatement[]) _list_f_stmt.toArray(new StructureStatement[_list_f_stmt.size()]);
					 return new Symbol(new StructureIfStmt(e, t_stmt, f_stmt));
			}
			case 54: // lst$entity_indexing = entity_indexing
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 55: // lst$entity_indexing = lst$entity_indexing entity_indexing
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 58: // entity_port = IDENTIFIER.id_port opt$lst$entity_indexing.index_port
			{
					final Symbol id_port = _symbols[offset + 1];
					final Symbol _symbol_index_port = _symbols[offset + 2];
					final ArrayList _list_index_port = (ArrayList) _symbol_index_port.value;
					final Expression[] index_port = _list_index_port == null ? new Expression[0] : (Expression[]) _list_index_port.toArray(new Expression[_list_index_port.size()]);
					 return new Symbol(new PortReference(null, null, (String)id_port.value));
			}
			case 59: // entity_port = IDENTIFIER.id_entity opt$lst$entity_indexing.index_entity DOT IDENTIFIER.id_port opt$lst$entity_indexing.index_port
			{
					final Symbol id_entity = _symbols[offset + 1];
					final Symbol _symbol_index_entity = _symbols[offset + 2];
					final ArrayList _list_index_entity = (ArrayList) _symbol_index_entity.value;
					final Expression[] index_entity = _list_index_entity == null ? new Expression[0] : (Expression[]) _list_index_entity.toArray(new Expression[_list_index_entity.size()]);
					final Symbol id_port = _symbols[offset + 4];
					final Symbol _symbol_index_port = _symbols[offset + 5];
					final ArrayList _list_index_port = (ArrayList) _symbol_index_port.value;
					final Expression[] index_port = _list_index_port == null ? new Expression[0] : (Expression[]) _list_index_port.toArray(new Expression[_list_index_port.size()]);
					 return new Symbol(new PortReference((String)id_entity.value, index_entity , (String)id_port.value));
			}
			case 60: // entity_indexing = LBRACK.LBRACK expression.e RBRACK.RBRACK
			{
					final Symbol LBRACK = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol RBRACK = _symbols[offset + 3];
					 return _symbol_e;
			}
			case 61: // import_part = import_single.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final ArrayList i = (ArrayList) _symbol_i.value;
					 return _symbol_i;
			}
			case 62: // import_part = import_group.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final ArrayList i = (ArrayList) _symbol_i.value;
					 return _symbol_i;
			}
			case 63: // import_single = IMPORT import_kind.k qual_id.qual_id SEMICOLON
			{
					final Symbol _symbol_k = _symbols[offset + 2];
					final String k = (String) _symbol_k.value;
					final Symbol _symbol_qual_id = _symbols[offset + 3];
					final ArrayList qual_id = (ArrayList) _symbol_qual_id.value;
					 return new Symbol(qual_id);
			}
			case 64: // import_single = IMPORT import_kind.k qual_id.qual_id EQ IDENTIFIER.alias SEMICOLON
			{
					final Symbol _symbol_k = _symbols[offset + 2];
					final String k = (String) _symbol_k.value;
					final Symbol _symbol_qual_id = _symbols[offset + 3];
					final ArrayList qual_id = (ArrayList) _symbol_qual_id.value;
					final Symbol alias = _symbols[offset + 5];
					 return new Symbol(qual_id);
			}
			case 65: // import_group = IMPORT import_kind.k ALL qual_id.qual_id SEMICOLON
			{
					final Symbol _symbol_k = _symbols[offset + 2];
					final String k = (String) _symbol_k.value;
					final Symbol _symbol_qual_id = _symbols[offset + 4];
					final ArrayList qual_id = (ArrayList) _symbol_qual_id.value;
					 return new Symbol(qual_id);
			}
			case 66: // import_kind = 
			{
					 return new Symbol("");
			}
			case 67: // import_kind = ENTITY.kind
			{
					final Symbol kind = _symbols[offset + 1];
					 return kind;
			}
			case 68: // import_kind = VAR.kind
			{
					final Symbol kind = _symbols[offset + 1];
					 return kind;
			}
			case 69: // lst$tool_attribute = tool_attribute
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 70: // lst$tool_attribute = lst$tool_attribute tool_attribute
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 73: // tool_attribute_block = LBRACE opt$lst$tool_attribute.a RBRACE
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final ToolAttribute[] a = _list_a == null ? new ToolAttribute[0] : (ToolAttribute[]) _list_a.toArray(new ToolAttribute[_list_a.size()]);
					 return _symbol_a;
			}
			case 74: // tool_attribute = IDENTIFIER.ID EQ expression.expression SEMICOLON
			{
					final Symbol ID = _symbols[offset + 1];
					final Symbol _symbol_expression = _symbols[offset + 3];
					final Expression expression = (Expression) _symbol_expression.value;
					 return new Symbol(new ToolValueAttribute((String)ID.value, expression));
			}
			case 75: // tool_attribute = IDENTIFIER.ID COLON type.type SEMICOLON
			{
					final Symbol ID = _symbols[offset + 1];
					final Symbol _symbol_type = _symbols[offset + 3];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					 return new Symbol(new ToolTypeAttribute((String)ID.value, type));
			}
			case 78: // actor_parameter_list = actor_parameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 ArrayList result = new ArrayList(); result.add(p); return new Symbol(result);
			}
			case 79: // actor_parameter_list = actor_parameter_list.l COMMA actor_parameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 l.add(p); return _symbol_l;
			}
			case 82: // actor_parameter = IDENTIFIER.id opt$actor_parameter_init_expression.e
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new ParDeclValue((String)id.value, null));
			}
			case 83: // actor_parameter = type.t IDENTIFIER.id opt$actor_parameter_init_expression.e
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new ParDeclValue((String)id.value, t));
			}
			case 84: // actor_parameter_init_expression = EQ expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 85: // qual_id = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 ArrayList l = new ArrayList(); l.add(id.value); return new Symbol(l);
			}
			case 86: // qual_id = IDENTIFIER.id DOT qual_id.l
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 3];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, id.value); return _symbol_l;
			}
			case 87: // decl_list = decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 ArrayList l = new ArrayList(); l.add(d); return new Symbol(l);
			}
			case 88: // decl_list = decl_list.l COMMA decl.d
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 l.add(d); return _symbol_l;
			}
			case 89: // decl_block = VAR decl_list.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayList d = (ArrayList) _symbol_d.value;
					 return _symbol_d;
			}
			case 90: // decl_block_opt = 
			{
					 return new Symbol(new ArrayList());
			}
			case 91: // decl_block_opt = VAR decl_list.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayList d = (ArrayList) _symbol_d.value;
					 return _symbol_d;
			}
			case 92: // decl = var_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 93: // decl = fun_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 94: // decl = proc_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 95: // var_decl = MUTABLE var_name_type.v
			{
					final Symbol _symbol_v = _symbols[offset + 2];
					final DeclVar v = (DeclVar) _symbol_v.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, null, true));
			}
			case 96: // var_decl = MUTABLE var_name_type.v EQ expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 2];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 4];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, false));
			}
			case 97: // var_decl = MUTABLE var_name_type.v EQCOLON expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 2];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 4];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, true));
			}
			case 98: // var_decl = var_name_type.v
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final DeclVar v = (DeclVar) _symbol_v.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, null, true));
			}
			case 99: // var_decl = var_name_type.v EQ expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 3];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, false));
			}
			case 100: // var_decl = var_name_type.v COLONEQ expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 3];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, true));
			}
			case 101: // var_name_type = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new DeclVar(null, (String)id.value, null));
			}
			case 102: // var_name_type = type.type IDENTIFIER.id
			{
					final Symbol _symbol_type = _symbols[offset + 1];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new DeclVar(type, (String)id.value, null));
			}
			case 103: // fun_decl = FUNCTION IDENTIFIER.id lambda_expr_body.lambda
			{
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_lambda = _symbols[offset + 3];
					final ExprLambda lambda = (ExprLambda) _symbol_lambda.value;
					 return new Symbol(new DeclVar(null, (String)id.value, null, lambda, false));
			}
			case 104: // proc_decl = PROCEDURE IDENTIFIER.id procedure_expr_body.body
			{
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_body = _symbols[offset + 3];
					final ExprProc body = (ExprProc) _symbol_body.value;
					 return new Symbol(new DeclVar(null, (String)id.value, null, body, false));
			}
			case 105: // port_decl = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new AtomicPortDecl((String)id.value, null));
			}
			case 106: // port_decl = type.type IDENTIFIER.id
			{
					final Symbol _symbol_type = _symbols[offset + 1];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new AtomicPortDecl((String)id.value, type));
			}
			case 107: // port_decl = MULTI IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new AtomicPortDecl((String)id.value, null));
			}
			case 108: // port_decl = MULTI type.type IDENTIFIER.id
			{
					final Symbol _symbol_type = _symbols[offset + 2];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					final Symbol id = _symbols[offset + 3];
					 return new Symbol(new AtomicPortDecl((String)id.value, type));
			}
			case 109: // port_decl_list_opt = 
			{
					 return new Symbol(new CompositePortDecl());
			}
			case 110: // port_decl_list_opt = port_decl_list.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final CompositePortDecl l = (CompositePortDecl) _symbol_l.value;
					 return _symbol_l;
			}
			case 111: // port_decl_list = port_decl.port_decl
			{
					final Symbol _symbol_port_decl = _symbols[offset + 1];
					final PortDecl port_decl = (PortDecl) _symbol_port_decl.value;
					 CompositePortDecl l = new CompositePortDecl(); l.addChild(port_decl); return new Symbol(l);
			}
			case 112: // port_decl_list = port_decl_list.l COMMA port_decl.d
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final CompositePortDecl l = (CompositePortDecl) _symbol_l.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final PortDecl d = (PortDecl) _symbol_d.value;
					 l.addChild(d); return _symbol_l;
			}
			case 113: // type_bound = LT type.type
			{
					final Symbol _symbol_type = _symbols[offset + 2];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					 return _symbol_type;
			}
			case 114: // type_bound_opt = 
			{
					 return new Symbol(null);
			}
			case 115: // type_bound_opt = type_bound.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final TypeExpr n = (TypeExpr) _symbol_n.value;
					 return _symbol_n;
			}
			case 116: // type_parameter = IDENTIFIER.id type_bound_opt.type_bound
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_type_bound = _symbols[offset + 2];
					final TypeExpr type_bound = (TypeExpr) _symbol_type_bound.value;
					 return new Symbol(new ParDeclType((String)id.value));
			}
			case 119: // type_parameter_block = LBRACK opt$type_parameter_list.l RBRACK
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 return _symbol_l;
			}
			case 120: // type_parameter_list = type_parameter.tp
			{
					final Symbol _symbol_tp = _symbols[offset + 1];
					final ParDeclType tp = (ParDeclType) _symbol_tp.value;
					 ArrayList l = new ArrayList(); l.add(tp); return new Symbol(l);
			}
			case 121: // type_parameter_list = type_parameter_list.l COMMA type_parameter.tp
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_tp = _symbols[offset + 3];
					final ParDeclType tp = (ParDeclType) _symbol_tp.value;
					 l.add(tp); return _symbol_l;
			}
			case 122: // type_list = type.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 ArrayList l = new ArrayList(); l.add(t); return new Symbol(l);
			}
			case 123: // type_list = type_list.l COMMA type.t
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 l.add(t); return _symbol_l;
			}
			case 124: // type = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new TypeExpr((String)id.value));
			}
			case 127: // type = IDENTIFIER.id LBRACK opt$type_list.t RBRACK
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 3];
					final ArrayList t = (ArrayList) _symbol_t.value;
					 return new Symbol(t==null ? new TypeExpr((String)id.value) : new TypeExpr((String)id.value, (TypeExpr[])t.toArray(new TypeExpr[t.size()])));
			}
			case 130: // type = IDENTIFIER.id LPAREN opt$type_attribute_list.attributes RPAREN
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_attributes = _symbols[offset + 3];
					final ArrayList attributes = (ArrayList) _symbol_attributes.value;
					 Map<String,Expression> valueParameters = new java.util.HashMap();
                                                                   Map<String,TypeExpr> typeParameters = new java.util.HashMap();
                                                                   for(Map.Entry map : (ArrayList<Map.Entry>)attributes){
                                                                     if(map.getValue() instanceof Expression){
                                                                       valueParameters.put((String)map.getKey(), (Expression)map.getValue());
                                                                     } else {
                                                                       typeParameters.put((String)map.getKey(), (TypeExpr)map.getValue());
                                                                     }
                                                                   }
                                                                   return new Symbol(new TypeExpr((String)id.value, typeParameters, valueParameters));
			}
			case 131: // type = LBRACK opt$type_list.param EDGE type.result_type RBRACK
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ArrayList param = (ArrayList) _symbol_param.value;
					final Symbol _symbol_result_type = _symbols[offset + 4];
					final TypeExpr result_type = (TypeExpr) _symbol_result_type.value;
					 return new Symbol(null);
			}
			case 132: // type = LBRACK opt$type_list.param EDGE RBRACK
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ArrayList param = (ArrayList) _symbol_param.value;
					 return new Symbol(null);
			}
			case 133: // type_attribute_list = type_attribute.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Map.Entry t = (Map.Entry) _symbol_t.value;
					 ArrayList l = new ArrayList(); l.add(t); return new Symbol(l);
			}
			case 134: // type_attribute_list = type_attribute_list.l COMMA type_attribute.t
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Map.Entry t = (Map.Entry) _symbol_t.value;
					 l.add(t); return _symbol_l;
			}
			case 135: // type_attribute = IDENTIFIER.id COLON type.type
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_type = _symbols[offset + 3];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					 return new Symbol(new AbstractMap.SimpleEntry((String)id.value, type));
			}
			case 136: // type_attribute = IDENTIFIER.id EQ expression.e
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new AbstractMap.SimpleEntry((String)id.value, e));
			}
			case 137: // edge_type = EDGE type.t
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 return _symbol_t;
			}
			case 142: // procedure_expr_body = LPAREN opt$formal_parameter_list.param RPAREN opt$decl_block.decl stmt_block_opt.body end_proc
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ArrayList param = (ArrayList) _symbol_param.value;
					final Symbol _symbol_decl = _symbols[offset + 4];
					final ArrayList decl = (ArrayList) _symbol_decl.value;
					final Symbol _symbol_body = _symbols[offset + 5];
					final ArrayList body = (ArrayList) _symbol_body.value;
					 return new Symbol(new ExprProc(new ParDeclType[0], 
                                                                                                                    param==null ? new ParDeclValue[0] : (ParDeclValue[])param.toArray(new ParDeclValue[param.size()]),
                                                                                                                    new DeclType[0],
                                                                                                                    decl==null ? new DeclVar[0] : (DeclVar[])decl.toArray(new DeclVar[decl.size()]),
                                                                                                                    (Statement[])body.toArray(new Statement[body.size()])));
			}
			case 143: // stmt_block_opt = 
			{
					 return new Symbol(new ArrayList());
			}
			case 144: // stmt_block_opt = do_begin statement_list_opt.s
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final ArrayList s = (ArrayList) _symbol_s.value;
					 return _symbol_s;
			}
			case 145: // lambda_expr_body = LPAREN opt$formal_parameter_list.param RPAREN expression.body end_lambda
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ArrayList param = (ArrayList) _symbol_param.value;
					final Symbol _symbol_body = _symbols[offset + 4];
					final Expression body = (Expression) _symbol_body.value;
					 return new Symbol(new ExprLambda(new ParDeclType[0],
                                             param==null ? new ParDeclValue[0] : (ParDeclValue[])param.toArray(new ParDeclValue[param.size()]),
                                             new DeclType[0], 
                                             new DeclVar[0],
                                             body,
                                             null));
			}
			case 146: // lambda_expr_body = LPAREN opt$formal_parameter_list.param RPAREN opt$decl_block.decl COLON expression.body end_lambda
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ArrayList param = (ArrayList) _symbol_param.value;
					final Symbol _symbol_decl = _symbols[offset + 4];
					final ArrayList decl = (ArrayList) _symbol_decl.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final Expression body = (Expression) _symbol_body.value;
					 return new Symbol(new ExprLambda(new ParDeclType[0],
                                             param==null ? new ParDeclValue[0] : (ParDeclValue[])param.toArray(new ParDeclValue[param.size()]),
                                             new DeclType[0],
                                             decl==null ? new DeclVar[0] : (DeclVar[])decl.toArray(new DeclVar[decl.size()]),
                                             body,
                                             null));
			}
			case 147: // lambda_expr_body = LPAREN opt$formal_parameter_list.param RPAREN edge_type.t opt$decl_block.decl COLON expression.body end_lambda
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ArrayList param = (ArrayList) _symbol_param.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_decl = _symbols[offset + 5];
					final ArrayList decl = (ArrayList) _symbol_decl.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final Expression body = (Expression) _symbol_body.value;
					 return new Symbol(new ExprLambda(new ParDeclType[0],
                                             param==null ? new ParDeclValue[0] : (ParDeclValue[])param.toArray(new ParDeclValue[param.size()]),
                                             new DeclType[0],
                                             decl==null ? new DeclVar[0] : (DeclVar[])decl.toArray(new DeclVar[decl.size()]),
                                             body,
                                             t));
			}
			case 148: // map_list = map_entry.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final Map.Entry m = (Map.Entry) _symbol_m.value;
					 ArrayList l = new ArrayList(); l.add(m); return new Symbol(l);
			}
			case 149: // map_list = map_list.l COMMA map_entry.m
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 3];
					final Map.Entry m = (Map.Entry) _symbol_m.value;
					 l.add(m); return _symbol_l;
			}
			case 150: // map_entry = expression.e1 ARROW expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expression e1 = (Expression) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expression e2 = (Expression) _symbol_e2.value;
					 return new Symbol(new AbstractMap.SimpleEntry(e1, e2));
			}
			case 151: // tail = BAR expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 152: // expression_list = expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 ArrayList l = new ArrayList(); l.add(e); return new Symbol(l);
			}
			case 153: // expression_list = expression_list.l COMMA expression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expression e = (Expression) _symbol_e.value;
					 l.add(e); return _symbol_l;
			}
			case 154: // expression_list_opt = 
			{
					 return new Symbol(new ArrayList());
			}
			case 155: // expression_list_opt = expression_list.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final ArrayList n = (ArrayList) _symbol_n.value;
					 return _symbol_n;
			}
			case 158: // method_invocation = indexing_expression.function LPAREN opt$expression_list.args RPAREN
			{
					final Symbol _symbol_function = _symbols[offset + 1];
					final Expression function = (Expression) _symbol_function.value;
					final Symbol _symbol_args = _symbols[offset + 3];
					final ArrayList args = (ArrayList) _symbol_args.value;
					 return new Symbol(new ExprApplication(function, args==null ? new Expression[0] : (Expression[])args.toArray(new Expression[args.size()])));
			}
			case 159: // literal = INTEGER_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.litInteger, ((String)txt.value)));
			}
			case 160: // literal = LONG_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.litInteger, ((String)txt.value)));
			}
			case 161: // literal = FLOATING_POINT_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.litInteger, ((String)txt.value)));
			}
			case 162: // literal = DOUBLE_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.litReal, ((String)txt.value)));
			}
			case 163: // literal = TRUE_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.litTrue, ((String)txt.value)));
			}
			case 164: // literal = FALSE_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.litFalse, ((String)txt.value)));
			}
			case 165: // literal = CHARACTER_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.litChar, ((String)txt.value)));
			}
			case 166: // literal = STRING_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.litString, ((String)txt.value)));
			}
			case 167: // literal = NULL_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.litNull, ((String)txt.value)));
			}
			case 168: // primary = literal.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ExprLiteral l = (ExprLiteral) _symbol_l.value;
					 return _symbol_l;
			}
			case 169: // primary = LPAREN expression.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return new ParenthesSymbol(_symbol_e);
			}
			case 170: // primary = LPAREN.LPAREN expression.e DOUBLECOLON type.t RPAREN
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 parseProblems.add("Type assertion is not supported. Assertion is ignored at " + Symbol.getLine(LPAREN.getStart()) + ", " + Symbol.getColumn(LPAREN.getStart()));
			}
			case 171: // simple_expression = primary.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expression p = (Expression) _symbol_p.value;
					 return _symbol_p;
			}
			case 172: // simple_expression = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new ExprVariable((String)id.value));
			}
			case 173: // simple_expression = OLD IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new ExprVariable((String)id.value));
			}
			case 174: // simple_expression = IF expression.c THEN expression.e1 ELSE expression.e2 END
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final Expression c = (Expression) _symbol_c.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final Expression e1 = (Expression) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final Expression e2 = (Expression) _symbol_e2.value;
					 return new Symbol(new ExprIf(c, e1, e2));
			}
			case 175: // simple_expression = LBRACE expression_list_opt.e RBRACE
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ArrayList e = (ArrayList) _symbol_e.value;
					 return new Symbol(new ExprSet((Expression[])e.toArray(new Expression[e.size()])));
			}
			case 176: // simple_expression = LBRACE expression_list_opt.e COLON for_generator_list.l RBRACE
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ArrayList e = (ArrayList) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 return new Symbol(new ExprSet((Expression[])e.toArray(new Expression[e.size()]), (GeneratorFilter[])l.toArray(new GeneratorFilter[l.size()])));
			}
			case 177: // simple_expression = LBRACK expression_list_opt.e RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ArrayList e = (ArrayList) _symbol_e.value;
					 return new Symbol(new ExprList((Expression[])e.toArray(new Expression[e.size()])));
			}
			case 178: // simple_expression = LBRACK expression_list_opt.e tail.tail RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ArrayList e = (ArrayList) _symbol_e.value;
					final Symbol _symbol_tail = _symbols[offset + 3];
					final Expression tail = (Expression) _symbol_tail.value;
					 return new Symbol(new ExprList((Expression[])e.toArray(new Expression[e.size()])));
			}
			case 179: // simple_expression = LBRACK expression_list_opt.e COLON for_generator_list.l RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ArrayList e = (ArrayList) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 return new Symbol(new ExprList((Expression[])e.toArray(new Expression[e.size()]), (GeneratorFilter[])l.toArray(new GeneratorFilter[l.size()])));
			}
			case 180: // simple_expression = LBRACK expression_list_opt.e COLON for_generator_list.l tail.tail RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ArrayList e = (ArrayList) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_tail = _symbols[offset + 5];
					final Expression tail = (Expression) _symbol_tail.value;
					 return new Symbol(new ExprList((Expression[])e.toArray(new Expression[e.size()]), (GeneratorFilter[])l.toArray(new GeneratorFilter[l.size()])));
			}
			case 183: // simple_expression = MAP LBRACE opt$map_list.m RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 3];
					final ArrayList m = (ArrayList) _symbol_m.value;
					 return new Symbol(new ExprMap(m==null? new java.util.Map.Entry[0] : 
                                                                                                              (java.util.Map.Entry<Expression,Expression>[])m.toArray(new java.util.Map.Entry[m.size()])));
			}
			case 184: // simple_expression = MAP LBRACE opt$map_list.m COLON for_generator_list.generators RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 3];
					final ArrayList m = (ArrayList) _symbol_m.value;
					final Symbol _symbol_generators = _symbols[offset + 5];
					final ArrayList generators = (ArrayList) _symbol_generators.value;
					 return new Symbol(new ExprMap(m==null? new java.util.Map.Entry[0] : 
                                                                                                              (java.util.Map.Entry<Expression,Expression>[])m.toArray(new java.util.Map.Entry[m.size()]), 
                                                                                                              (GeneratorFilter[])generators.toArray(new GeneratorFilter[generators.size()])));
			}
			case 185: // simple_expression = LET decl_list.l COLON expression.e end_let
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new ExprLet(new DeclType[0], (DeclVar[])l.toArray(new DeclVar[l.size()]), e));
			}
			case 186: // simple_expression = LAMBDA lambda_expr_body.lambda
			{
					final Symbol _symbol_lambda = _symbols[offset + 2];
					final ExprLambda lambda = (ExprLambda) _symbol_lambda.value;
					 return _symbol_lambda;
			}
			case 187: // simple_expression = CONST LAMBDA lambda_expr_body.lambda
			{
					final Symbol _symbol_lambda = _symbols[offset + 3];
					final ExprLambda lambda = (ExprLambda) _symbol_lambda.value;
					 return _symbol_lambda;
			}
			case 188: // simple_expression = PROC procedure_expr_body.p
			{
					final Symbol _symbol_p = _symbols[offset + 2];
					final ExprProc p = (ExprProc) _symbol_p.value;
					 return _symbol_p;
			}
			case 189: // unary_expression = simple_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 190: // unary_expression = operator.operator unary_expression.expr
			{
					final Symbol _symbol_operator = _symbols[offset + 1];
					final String operator = (String) _symbol_operator.value;
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					 return new Symbol(new ExprUnaryOp(operator, expr));
			}
			case 191: // indexing_expression = unary_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 192: // indexing_expression = indexing_expression.p LBRACK expression_list.l RBRACK
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expression p = (Expression) _symbol_p.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 return new Symbol(new ExprIndexer(p, (Expression[])l.toArray(new Expression[l.size()])));
			}
			case 193: // indexing_expression = indexing_expression.p DOT IDENTIFIER.id
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expression p = (Expression) _symbol_p.value;
					final Symbol id = _symbols[offset + 3];
					 return new Symbol(new ExprEntry((String)id.value, p));
			}
			case 194: // indexing_expression = method_invocation.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ExprApplication m = (ExprApplication) _symbol_m.value;
					 return _symbol_m;
			}
			case 195: // expression = indexing_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 196: // expression = expression.arg1 operator.operator indexing_expression.arg2
			{
					final Symbol _symbol_arg1 = _symbols[offset + 1];
					final Expression arg1 = (Expression) _symbol_arg1.value;
					final Symbol _symbol_operator = _symbols[offset + 2];
					final String operator = (String) _symbol_operator.value;
					final Symbol _symbol_arg2 = _symbols[offset + 3];
					final Expression arg2 = (Expression) _symbol_arg2.value;
					 String[] operators;
                                                               Expression[] operands;
                                                               boolean arg1IsPar = _symbol_arg1 instanceof ParenthesSymbol;
                                                               if((arg1 instanceof ExprBinaryOp) && !(arg1IsPar)){
                                                                 ExprBinaryOp expr = (ExprBinaryOp)arg1;
                                                                 operators = Arrays.copyOf(expr.getOperations(), expr.getOperations().length + 1);
                                                                 operators[operators.length-1] = operator;
                                                                 operands = Arrays.copyOf(expr.getOperands(), expr.getOperands().length + 1);
                                                                 operands[operands.length-1] = arg2;
                                                               } else {
                                                                 operators = new String[1];
                                                                 operators[0] = operator;
                                                                 operands = new Expression[2];
                                                                 operands[0] = arg1;
                                                                 operands[1] = arg2;
                                                               }
                                                               return new Symbol(new ExprBinaryOp(operators, operands));
			}
			case 197: // operator = OPERATOR.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 198: // operator = EQ.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 199: // operator = IN.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 200: // operator = GT.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 201: // operator = MULT.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 202: // formal_parameter = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new ParDeclValue((String)id.value, null));
			}
			case 203: // formal_parameter = type.t IDENTIFIER.id
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new ParDeclValue((String)id.value, t));
			}
			case 204: // formal_parameter_list = formal_parameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 ArrayList l = new ArrayList(); l.add(p); return new Symbol(l);
			}
			case 205: // formal_parameter_list = formal_parameter_list.l COMMA formal_parameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 l.add(p);  return _symbol_l;
			}
			case 206: // statement = expression.lhs COLONEQ expression.value SEMICOLON
			{
					final Symbol _symbol_lhs = _symbols[offset + 1];
					final Expression lhs = (Expression) _symbol_lhs.value;
					final Symbol _symbol_value = _symbols[offset + 3];
					final Expression value = (Expression) _symbol_value.value;
					 if(lhs instanceof ExprVariable){
                                                           return new Symbol(new StmtAssignment(((ExprVariable)lhs).getName(), value)); 
                                                         } else if(lhs instanceof ExprIndexer){
                                                             ExprIndexer indexer = (ExprIndexer)lhs;
                                                             if(indexer.getStructure() instanceof ExprVariable){
                                                               return new Symbol(new StmtAssignment(((ExprVariable)indexer.getStructure()).getName(), value, indexer.getLocation())); 
                                                             }
                                                         } else if(lhs instanceof ExprEntry){
                                                             ExprEntry field = (ExprEntry)lhs;
                                                             if(field.getEnclosingExpr() instanceof ExprVariable){
                                                               return new Symbol(new StmtAssignment(((ExprVariable)field.getEnclosingExpr()).getName(), value, field.getName())); 
                                                             }
                                                         }
                                                         newError("Illegal left hand sign of assignment.", _symbol_lhs);
                                                         return new Symbol(new StmtAssignment("illegal", value));
			}
			case 207: // statement = method_invocation.m SEMICOLON
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ExprApplication m = (ExprApplication) _symbol_m.value;
					 return new Symbol(new StmtCall(m.getFunction(), m.getArgs()));
			}
			case 208: // statement = BEGIN statement_list_opt.s END
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final ArrayList s = (ArrayList) _symbol_s.value;
					 return new Symbol(new StmtBlock(new DeclType[0], new DeclVar[0], (Statement[])s.toArray(new Statement[s.size()])));
			}
			case 209: // statement = BEGIN VAR decl_list.d DO statement_list_opt.s END
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final ArrayList d = (ArrayList) _symbol_d.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final ArrayList s = (ArrayList) _symbol_s.value;
					 return new Symbol(new StmtBlock(new DeclType[0], (DeclVar[])d.toArray(new DeclVar[d.size()]), (Statement[])s.toArray(new Statement[s.size()])));
			}
			case 210: // statement = IF expression.e THEN statement_list_opt.s end_if
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList s = (ArrayList) _symbol_s.value;
					 return new Symbol(new StmtIf(e, new StmtBlock(null, null, (Statement[])s.toArray(new Statement[s.size()])), null));
			}
			case 211: // statement = IF expression.e THEN statement_list_opt.s1 ELSE statement_list_opt.s2 end_if
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_s1 = _symbols[offset + 4];
					final ArrayList s1 = (ArrayList) _symbol_s1.value;
					final Symbol _symbol_s2 = _symbols[offset + 6];
					final ArrayList s2 = (ArrayList) _symbol_s2.value;
					 return new Symbol(new StmtIf(e, 
                                                                                                                 new StmtBlock(null, null, (Statement[])s1.toArray(new Statement[s1.size()])),
                                                                                                                 new StmtBlock(null, null, (Statement[])s2.toArray(new Statement[s2.size()]))));
			}
			case 212: // statement = WHILE expression.e decl_block_opt.d DO statement_list_opt.s end_while
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final ArrayList d = (ArrayList) _symbol_d.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final ArrayList s = (ArrayList) _symbol_s.value;
					 return new Symbol(new StmtWhile(e, new StmtBlock(new DeclType[0],
                                                                                                                              (DeclVar[])d.toArray(new DeclVar[d.size()]),
                                                                                                                              (Statement[])s.toArray(new Statement[s.size()]))));
			}
			case 216: // statement = for_generator_list.g DO statement_list_opt.s end_foreach
			{
					final Symbol _symbol_g = _symbols[offset + 1];
					final ArrayList g = (ArrayList) _symbol_g.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList s = (ArrayList) _symbol_s.value;
					 return new Symbol(new StmtForeach((GeneratorFilter[])g.toArray(new GeneratorFilter[g.size()]),
                                                                                                               new StmtBlock(new DeclType[0], new DeclVar[0], (Statement[])s.toArray(new Statement[s.size()]))));
			}
			case 217: // statement = for_generator_list.g decl_block.d DO statement_list_opt.s end_foreach
			{
					final Symbol _symbol_g = _symbols[offset + 1];
					final ArrayList g = (ArrayList) _symbol_g.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayList d = (ArrayList) _symbol_d.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList s = (ArrayList) _symbol_s.value;
					 return new Symbol(new StmtForeach((GeneratorFilter[])g.toArray(new GeneratorFilter[g.size()]),
                                                                                                               new StmtBlock(new DeclType[0], (DeclVar[])d.toArray(new DeclVar[d.size()]), (Statement[])s.toArray(new Statement[s.size()]))));
			}
			case 218: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(null, vars, e, null)); return new Symbol(l);
			}
			case 219: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(t, vars, e, null)); return new Symbol(l);
			}
			case 220: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ArrayList filters = (ArrayList) _symbol_filters.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(null, vars, e, filters)); return new Symbol(l);
			}
			case 221: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ArrayList filters = (ArrayList) _symbol_filters.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(t, vars, e, filters)); return new Symbol(l);
			}
			case 222: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e COMMA choose_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(null, vars, e, null)); return _symbol_l;
			}
			case 223: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e COMMA choose_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(t, vars, e, null)); return _symbol_l;
			}
			case 224: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA choose_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ArrayList filters = (ArrayList) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 8];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(null, vars, e, filters)); return _symbol_l;
			}
			case 225: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA choose_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ArrayList filters = (ArrayList) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 9];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(t, vars, e, filters)); return _symbol_l;
			}
			case 226: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(null, vars, e, null)); return new Symbol(l);
			}
			case 227: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(t, vars, e, null)); return new Symbol(l);
			}
			case 228: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ArrayList filters = (ArrayList) _symbol_filters.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(null, vars, e, filters)); return new Symbol(l);
			}
			case 229: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ArrayList filters = (ArrayList) _symbol_filters.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(t, vars, e, filters)); return new Symbol(l);
			}
			case 230: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e COMMA for_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(null, vars, e, null)); return _symbol_l;
			}
			case 231: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e COMMA for_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(t, vars, e, null)); return _symbol_l;
			}
			case 232: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA for_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ArrayList filters = (ArrayList) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 8];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(null, vars, e, filters)); return _symbol_l;
			}
			case 233: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA for_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ArrayList vars = (ArrayList) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ArrayList filters = (ArrayList) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 9];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(t, vars, e, filters)); return _symbol_l;
			}
			case 234: // generator_variable_list = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 ArrayList l = new ArrayList(); l.add(id); return new Symbol(l);
			}
			case 235: // generator_variable_list = generator_variable_list.l COMMA IDENTIFIER.id
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol id = _symbols[offset + 3];
					 l.add(id); return _symbol_l;
			}
			case 254: // statement_list_opt = 
			{
					 return new Symbol(new ArrayList());
			}
			case 255: // statement_list_opt = statement_list.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 return _symbol_l;
			}
			case 256: // statement_list = statement.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Statement n = (Statement) _symbol_n.value;
					 ArrayList l = new ArrayList(); l.add(n); return new Symbol(l);
			}
			case 257: // statement_list = statement_list.l statement.n
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final Statement n = (Statement) _symbol_n.value;
					 l.add(n); return _symbol_l;
			}
			case 0: // opt$type_parameter_block = 
			case 2: // opt$actor_parameter_list = 
			case 6: // opt$lst$network_body_part = 
			case 8: // opt$SEMICOLON = 
			case 18: // opt$lst$network_decl = 
			case 26: // opt$lst$entity = 
			case 30: // opt$param_assign_list = 
			case 32: // opt$tool_attribute_block = 
			case 36: // opt$entity_expr_list = 
			case 47: // opt$lst$entity_statement = 
			case 56: // opt$lst$entity_indexing = 
			case 71: // opt$lst$tool_attribute = 
			case 80: // opt$actor_parameter_init_expression = 
			case 117: // opt$type_parameter_list = 
			case 125: // opt$type_list = 
			case 128: // opt$type_attribute_list = 
			case 138: // opt$formal_parameter_list = 
			case 140: // opt$decl_block = 
			case 156: // opt$expression_list = 
			case 181: // opt$map_list = 
			{
				return new Symbol(null);
			}
			case 1: // opt$type_parameter_block = type_parameter_block
			case 3: // opt$actor_parameter_list = actor_parameter_list
			case 7: // opt$lst$network_body_part = lst$network_body_part
			case 9: // opt$SEMICOLON = SEMICOLON
			case 19: // opt$lst$network_decl = lst$network_decl
			case 27: // opt$lst$entity = lst$entity
			case 31: // opt$param_assign_list = param_assign_list
			case 33: // opt$tool_attribute_block = tool_attribute_block
			case 37: // opt$entity_expr_list = entity_expr_list
			case 48: // opt$lst$entity_statement = lst$entity_statement
			case 57: // opt$lst$entity_indexing = lst$entity_indexing
			case 72: // opt$lst$tool_attribute = lst$tool_attribute
			case 76: // end_network = END
			case 77: // end_network = ENDNETWORK
			case 81: // opt$actor_parameter_init_expression = actor_parameter_init_expression
			case 118: // opt$type_parameter_list = type_parameter_list
			case 126: // opt$type_list = type_list
			case 129: // opt$type_attribute_list = type_attribute_list
			case 139: // opt$formal_parameter_list = formal_parameter_list
			case 141: // opt$decl_block = decl_block
			case 157: // opt$expression_list = expression_list
			case 182: // opt$map_list = map_list
			case 236: // for_foreach = FOREACH.FOREACH
			case 237: // for_foreach = FOR.FOR
			case 238: // do_begin = BEGIN.BEGIN
			case 239: // do_begin = DO.DO
			case 240: // end_choose = END.END
			case 241: // end_choose = ENDCHOOSE.ENDCHOOSE
			case 242: // end_foreach = END.END
			case 243: // end_foreach = ENDFOREACH.ENDFOREACH
			case 244: // end_if = END.END
			case 245: // end_if = ENDIF.ENDIF
			case 246: // end_lambda = END.END
			case 247: // end_lambda = ENDLAMBDA.ENDLAMBDA
			case 248: // end_let = END.END
			case 249: // end_let = ENDLET.ENDLET
			case 250: // end_proc = END.END
			case 251: // end_proc = ENDPROC.ENDPROC
			case 252: // end_while = END.END
			case 253: // end_while = ENDWHILE.ENDWHILE
			{
				return _symbols[offset + 1];
			}
			case 213: // statement = choose_generator_list.l decl_block_opt.do_v DO statement_list_opt.do_s end_choose
			{
				return _symbols[offset + 4];
			}
			case 214: // statement = choose_generator_list.l decl_block_opt.do_v DO statement_list_opt.do_s ELSE statement_list_opt.else_s end_choose
			{
				return _symbols[offset + 6];
			}
			case 215: // statement = choose_generator_list.l decl_block_opt.do_v DO statement_list_opt.do_s ELSE decl_block_opt.else_v DO statement_list_opt.else_s end_choose
			{
				return _symbols[offset + 8];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}

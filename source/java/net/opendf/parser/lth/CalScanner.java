/* The following code was generated by JFlex 1.4.3 on 2013-05-08 16:21 */

package net.opendf.parser.lth; // The generated parser will belong to package AST_CAL

import beaver.Symbol;
import beaver.Scanner;
import net.opendf.parser.lth.CalParser.Terminals; // The terminals are implicitly defined in the parser
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2013-05-08 16:21 from the specification file
 * <tt>/Users/pera/workspace/dataflow/bin/generated/CalScanner.flex</tt>
 */
public final class CalScanner extends beaver.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\1\1\0\1\3\1\2\16\7\4\0\1\3\1\11"+
    "\1\25\1\11\1\12\2\11\1\24\1\62\1\63\1\5\1\23\1\71"+
    "\1\72\1\21\1\4\1\14\3\26\4\20\2\17\1\61\1\70\1\11"+
    "\1\74\1\73\2\11\3\16\1\60\1\22\1\57\5\6\1\56\13\6"+
    "\1\15\2\6\1\66\1\10\1\67\1\11\1\75\1\0\1\27\1\40"+
    "\1\30\1\45\1\41\1\46\1\42\1\43\1\32\2\6\1\36\1\50"+
    "\1\34\1\33\1\51\1\6\1\35\1\44\1\31\1\52\1\47\1\53"+
    "\1\55\1\37\1\54\1\64\1\13\1\65\1\11\41\7\2\0\4\6"+
    "\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6"+
    "\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6"+
    "\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0"+
    "\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0"+
    "\47\6\11\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\10\0\33\6\5\0\3\6\15\0\4\7\7\0\1\6\4\0"+
    "\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6"+
    "\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6"+
    "\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6"+
    "\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0"+
    "\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6"+
    "\3\7\244\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6"+
    "\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6"+
    "\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6"+
    "\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7"+
    "\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6"+
    "\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6"+
    "\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0"+
    "\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0\2\6"+
    "\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7"+
    "\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6"+
    "\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6\2\0"+
    "\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0"+
    "\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0"+
    "\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0"+
    "\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0"+
    "\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0"+
    "\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7"+
    "\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0"+
    "\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0"+
    "\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7"+
    "\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6"+
    "\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7"+
    "\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6"+
    "\12\0\53\6\1\0\1\6\3\0\u0149\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6"+
    "\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6"+
    "\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6"+
    "\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7"+
    "\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0"+
    "\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0"+
    "\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0"+
    "\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6"+
    "\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7"+
    "\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7"+
    "\6\0\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0"+
    "\12\7\21\0\11\7\14\0\3\7\36\6\12\7\3\0\2\6\12\7"+
    "\6\0\46\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0\3\6"+
    "\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6\1\7"+
    "\15\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6\23\0\1\6"+
    "\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6\20\0\15\6"+
    "\3\0\32\6\26\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6"+
    "\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6"+
    "\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6"+
    "\1\0\205\6\6\0\4\6\3\7\16\0\46\6\12\0\66\6\11\0"+
    "\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"+
    "\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0"+
    "\20\6\u0200\0\u19b6\6\112\0\u51cc\6\64\0\u048d\6\103\0\56\6\2\0"+
    "\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\14\0\2\7"+
    "\1\0\31\6\10\0\120\6\2\7\45\0\11\6\2\0\147\6\2\0"+
    "\4\6\1\0\2\6\16\0\12\6\120\0\10\6\1\7\3\6\1\7"+
    "\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7"+
    "\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0"+
    "\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7"+
    "\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6"+
    "\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7"+
    "\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6"+
    "\1\7\1\6\30\0\3\6\43\0\6\6\2\0\6\6\2\0\6\6"+
    "\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0"+
    "\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u012e\6\2\0"+
    "\76\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7"+
    "\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0"+
    "\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0"+
    "\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0"+
    "\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0"+
    "\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0"+
    "\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0"+
    "\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\1\2\3"+
    "\1\6\2\7\1\10\1\1\1\11\22\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\3"+
    "\1\23\1\24\1\25\2\26\1\1\1\27\1\2\1\3"+
    "\1\0\1\30\1\7\2\0\1\31\1\0\1\32\1\33"+
    "\1\34\1\31\1\35\1\0\2\36\1\0\1\5\1\37"+
    "\7\5\1\40\1\41\1\5\1\35\16\5\1\42\13\5"+
    "\1\43\1\44\1\3\1\45\1\0\1\46\1\47\2\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\0"+
    "\1\3\1\60\1\7\1\61\1\31\1\0\1\62\12\46"+
    "\1\5\1\63\1\64\1\65\10\5\1\66\4\5\1\67"+
    "\2\5\1\70\5\5\1\71\1\72\1\5\1\73\1\74"+
    "\5\5\1\75\1\76\1\50\1\0\1\2\1\77\1\100"+
    "\1\0\1\101\1\0\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\4\5\1\111\1\112\1\113\3\5\1\114"+
    "\15\5\1\115\11\5\1\116\2\5\1\117\1\120\11\5"+
    "\1\121\3\5\1\122\6\5\1\123\1\5\1\124\1\125"+
    "\3\5\1\126\2\5\1\127\1\130\1\131\2\5\1\132"+
    "\1\133\1\134\1\135\4\5\1\136\23\5\1\137\2\5"+
    "\1\140\1\5\1\141\5\5\1\142\5\5\1\143\1\144"+
    "\1\145\1\146\2\5\1\147\1\150\1\151\1\5\1\152"+
    "\2\5\1\153\1\154\2\5\1\155\1\5\1\156\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\174\0\272\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\u0136\0\u01f0\0\174\0\u022e\0\u026c\0\u02aa\0\u02e8"+
    "\0\174\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\174\0\174\0\174\0\174"+
    "\0\174\0\174\0\174\0\174\0\u07c0\0\u0136\0\u07fe\0\u083c"+
    "\0\174\0\u087a\0\u08b8\0\174\0\u08f6\0\u0934\0\u01b2\0\174"+
    "\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\174\0\174\0\174"+
    "\0\u0aa8\0\174\0\u0ae6\0\174\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
    "\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0174\0\u0e0c\0\u0174\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132"+
    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322"+
    "\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\174\0\174\0\u1496"+
    "\0\u0136\0\u14d4\0\174\0\174\0\u1512\0\u1550\0\174\0\174"+
    "\0\174\0\174\0\174\0\174\0\174\0\u158e\0\u15cc\0\174"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\174\0\u1702\0\u1740\0\u177e"+
    "\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e"+
    "\0\174\0\u0174\0\u0174\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u0174\0\u1b9c\0\u1bda\0\u1c18\0\u1c56"+
    "\0\u0174\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u0174\0\u1ec2\0\u0174\0\u0174\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u0136\0\174\0\174\0\u2036\0\u0136"+
    "\0\174\0\174\0\u177e\0\174\0\u2074\0\174\0\174\0\174"+
    "\0\174\0\174\0\174\0\174\0\u20b2\0\u20f0\0\u212e\0\u216c"+
    "\0\u0174\0\u0174\0\u0174\0\u21aa\0\u21e8\0\u2226\0\u0174\0\u2264"+
    "\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454"+
    "\0\u2492\0\u24d0\0\u250e\0\u254c\0\u0174\0\u258a\0\u25c8\0\u2606"+
    "\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6"+
    "\0\u2834\0\u0174\0\u0174\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a"+
    "\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u0174\0\u2aa0\0\u2ade\0\u2b1c"+
    "\0\u0174\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u0174"+
    "\0\u2cce\0\u0174\0\u0174\0\u2d0c\0\u2d4a\0\u2d88\0\u0174\0\u2dc6"+
    "\0\u2e04\0\u0174\0\u0174\0\u0174\0\u2e42\0\u2e80\0\u0174\0\u0174"+
    "\0\u0174\0\u0174\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u0174\0\u2fb6"+
    "\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6"+
    "\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396"+
    "\0\u33d4\0\u3412\0\u0174\0\u3450\0\u348e\0\u0174\0\u34cc\0\u0174"+
    "\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u0174\0\u3640\0\u367e"+
    "\0\u36bc\0\u36fa\0\u3738\0\u0174\0\u0174\0\u0174\0\u0174\0\u3776"+
    "\0\u37b4\0\u0174\0\u0174\0\u0174\0\u37f2\0\u0174\0\u3830\0\u386e"+
    "\0\u0174\0\u0174\0\u38ac\0\u38ea\0\u0174\0\u3928\0\u0174\0\u0174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\15\2\10\2\16\1\17"+
    "\1\10\1\12\1\20\1\21\1\16\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\10\1\32\1\33"+
    "\1\34\1\10\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\10\1\43\5\10\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\10"+
    "\1\60\1\61\1\62\5\60\1\63\14\60\1\64\50\60"+
    "\77\0\1\4\100\0\1\65\1\66\3\0\3\12\7\0"+
    "\1\12\46\0\3\12\5\0\2\12\3\0\3\12\7\0"+
    "\1\12\46\0\3\12\7\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\33\10\14\0\1\10\10\67"+
    "\1\70\65\67\4\0\2\12\2\10\1\0\1\12\1\13"+
    "\1\12\5\10\1\0\1\10\1\12\2\0\33\10\11\0"+
    "\3\12\1\10\14\0\1\71\1\72\1\0\1\73\1\71"+
    "\1\74\1\75\3\0\1\71\7\0\1\76\2\0\1\75"+
    "\3\0\1\77\1\100\6\0\1\72\1\76\1\100\1\77"+
    "\31\0\1\16\2\0\2\16\1\74\1\75\3\0\1\16"+
    "\7\0\1\76\2\0\1\75\3\0\1\77\1\100\7\0"+
    "\1\76\1\100\1\77\31\0\1\101\2\0\2\101\1\102"+
    "\4\0\1\101\47\0\1\103\1\104\1\105\5\103\1\106"+
    "\13\103\1\0\51\103\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\2\10\1\107\1\110\2\10"+
    "\1\111\1\10\1\112\22\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\5\10"+
    "\1\113\7\10\1\114\15\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\4\10"+
    "\1\115\2\10\1\116\5\10\1\117\15\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\6\10\1\120\11\10\1\121\1\10\1\122\10\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\7\10\1\123\1\124\22\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\5\10\1\125\16\10\1\126\6\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\6\10\1\127\4\10\1\130\17\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\1\10\1\131\11\10\1\132\17\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\4\10\1\133\6\10\1\134\17\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\6\10\1\135\1\10\1\136\22\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\24\10\1\137\6\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\2\10\1\140\30\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\4\10\1\141"+
    "\1\142\5\10\1\143\17\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\1\10"+
    "\1\144\3\10\1\145\10\10\1\146\5\10\1\147\6\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\1\10\1\150\31\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\1\10\1\151\3\10\1\152\16\10\1\153\6\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\7\10\1\154\23\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\15\10\1\155\15\10\14\0\1\10\61\0\1\156"+
    "\12\0\1\157\5\0\2\12\3\0\3\12\7\0\1\12"+
    "\46\0\1\160\1\161\1\12\75\0\1\162\1\0\1\60"+
    "\2\0\5\60\1\0\14\60\1\0\50\60\1\0\1\61"+
    "\74\0\1\163\1\0\6\163\1\164\3\163\1\165\3\163"+
    "\1\166\3\163\1\167\1\170\1\165\2\163\1\171\2\163"+
    "\1\172\1\173\2\163\1\174\5\163\1\175\27\163\1\65"+
    "\1\4\1\5\73\65\4\176\1\66\1\177\3\176\3\66"+
    "\7\176\1\66\46\176\3\66\1\176\14\0\1\71\2\0"+
    "\1\73\1\71\1\101\1\75\3\0\1\71\7\0\1\200"+
    "\2\0\1\75\3\0\1\77\1\100\7\0\1\200\1\100"+
    "\1\77\31\0\1\201\1\0\3\201\1\0\1\201\3\0"+
    "\3\201\7\0\2\201\3\0\2\201\10\0\2\201\31\0"+
    "\1\73\2\0\2\73\1\101\1\75\3\0\1\73\12\0"+
    "\1\75\3\0\1\77\1\100\10\0\1\100\1\77\31\0"+
    "\1\101\2\0\2\101\1\202\1\75\3\0\1\101\12\0"+
    "\1\75\3\0\1\77\1\100\10\0\1\100\1\77\31\0"+
    "\1\203\2\0\2\203\2\0\1\204\2\0\1\203\43\0"+
    "\1\204\17\0\1\101\2\0\2\101\1\0\1\75\3\0"+
    "\1\101\12\0\1\75\3\0\1\77\1\100\10\0\1\100"+
    "\1\77\41\0\1\205\52\0\1\104\74\0\1\163\1\0"+
    "\6\163\1\206\3\163\1\207\3\163\1\210\3\163\1\211"+
    "\1\212\1\207\2\163\1\213\2\163\1\214\1\215\2\163"+
    "\1\216\5\163\1\217\27\163\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\3\10\1\220\27\10"+
    "\14\0\1\10\5\0\1\221\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\33\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\11\10\1\222\5\10\1\123\13\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\10\10\1\223\22\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\6\10\1\224"+
    "\24\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\5\10\1\225\25\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\22\10\1\226\10\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\24\10\1\227\6\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\13\10\1\230"+
    "\17\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\4\10\1\231\14\10\1\232"+
    "\11\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\23\10\1\233\7\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\17\10\1\234\13\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\3\10\1\123\27\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\10\10\1\235"+
    "\22\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\14\10\1\123\16\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\14\10\1\236\6\10\1\237\7\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\22\10\1\240\10\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\3\10\1\241\27\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\3\10\1\242"+
    "\27\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\14\10\1\243\16\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\17\10\1\244\13\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\16\10\1\245\14\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\1\10\1\246"+
    "\31\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\15\10\1\247\15\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\21\10\1\123\11\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\22\10\1\123\10\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\10\10\1\250"+
    "\22\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\10\10\1\251\22\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\7\10\1\252\23\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\22\10\1\253\10\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\6\10\1\254"+
    "\24\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\7\10\1\255\23\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\23\10\1\256\7\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\17\10\1\123\13\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\3\10\1\257"+
    "\4\10\1\260\22\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\4\10\1\261"+
    "\1\262\25\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\4\10\1\263\26\10"+
    "\14\0\1\10\4\0\2\12\3\0\3\12\7\0\1\12"+
    "\46\0\1\12\1\264\1\12\74\0\1\265\16\0\1\166"+
    "\3\0\1\166\5\0\1\166\63\0\1\266\3\0\1\266"+
    "\5\0\1\266\47\0\5\176\1\267\74\176\1\270\1\177"+
    "\3\176\3\66\7\176\1\66\46\176\3\66\1\176\14\0"+
    "\1\201\1\0\3\201\1\0\1\201\3\0\3\201\5\0"+
    "\1\200\1\0\2\201\3\0\2\201\7\0\1\200\2\201"+
    "\36\0\1\271\70\0\1\203\2\0\2\203\5\0\1\203"+
    "\16\0\1\77\1\100\10\0\1\100\1\77\31\0\1\203"+
    "\2\0\2\203\5\0\1\203\73\0\1\272\65\0\1\273"+
    "\3\0\1\273\3\0\1\274\1\0\1\273\63\0\1\275"+
    "\3\0\1\275\3\0\1\274\1\0\1\275\73\0\1\276"+
    "\75\0\1\277\75\0\1\300\75\0\1\301\75\0\1\302"+
    "\75\0\1\303\75\0\1\304\57\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\4\10\1\305\1\306"+
    "\25\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\16\10\1\307\14\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\5\10\1\310\25\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\13\10\1\311\17\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\13\10\1\312"+
    "\17\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\6\10\1\313\24\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\3\10\1\314\27\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\1\10\1\315\31\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\5\10\1\316"+
    "\25\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\10\10\1\317\22\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\13\10\1\320\17\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\13\10\1\321\17\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\12\10\1\322"+
    "\20\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\33\10\14\0\1\323\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\4\10\1\324\26\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\1\10\1\325"+
    "\1\326\1\10\1\327\3\10\1\330\5\10\1\331\1\10"+
    "\1\332\2\10\1\333\1\10\1\334\5\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\13\10\1\335\17\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\7\10"+
    "\1\336\23\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\13\10\1\337\17\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\1\10\1\340\31\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\16\10\1\341\14\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\13\10"+
    "\1\342\17\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\2\10\1\343\30\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\1\10\1\344\31\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\3\10\1\345\27\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\5\10"+
    "\1\346\25\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\2\10\1\347\30\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\10\10\1\350\22\10\14\0\1\10"+
    "\4\176\1\4\1\267\70\176\24\0\1\274\57\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\5\10"+
    "\1\351\25\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\7\10\1\352\23\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\3\10\1\353\27\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\16\10\1\354\14\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\4\10"+
    "\1\355\26\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\7\10\1\356\23\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\7\10\1\357\23\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\27\10\1\360\3\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\1\10"+
    "\1\361\31\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\17\10\1\362\13\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\5\10\1\363\21\10\1\364\3\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\6\10\1\365\24\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\2\10\1\366\30\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\15\10"+
    "\1\367\15\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\6\10\1\370\11\10"+
    "\1\371\12\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\1\10\1\372\11\10"+
    "\1\373\17\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\2\10\1\374\30\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\5\10\1\375\25\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\7\10\1\376\23\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\15\10"+
    "\1\377\15\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\17\10\1\u0100\13\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\17\10\1\u0101\13\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\11\10\1\u0102\21\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\13\10"+
    "\1\u0103\17\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\1\10\1\u0104\31\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\3\10\1\u0105\27\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\12\10\1\u0106\20\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\4\10"+
    "\1\u0107\26\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\7\10\1\u0108\23\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\13\10\1\u0109\17\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\13\10\1\u010a\17\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\6\10"+
    "\1\u010b\24\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\13\10\1\u010c\17\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\1\10\1\u010d\31\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\4\10\1\u010e\26\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\3\10"+
    "\1\u010f\27\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\23\10\1\u0110\7\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\3\10\1\u0111\27\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\1\10\1\u0112\31\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\7\10"+
    "\1\123\23\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\5\10\1\363\25\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\3\10\1\u0113\27\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\5\10\1\u0114\25\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\21\10"+
    "\1\u0115\11\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\22\10\1\u0116\10\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\3\10\1\u0117\27\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\15\10\1\u0118\15\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\7\10"+
    "\1\u0119\23\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\5\10\1\u011a\25\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\4\10\1\u011b\26\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\24\10\1\u011c\6\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\2\10"+
    "\1\u011d\30\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\4\10\1\u011e\26\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\10\10\1\u011f\22\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\4\10\1\u0120\26\10\14\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\17\10"+
    "\1\u0121\13\10\14\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\10\10\1\u0122\22\10"+
    "\14\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\1\10\1\u0123\31\10\14\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\4\10\1\u0124\1\u0125\25\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\5\10\1\u0126\25\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\1\10\1\u0127"+
    "\31\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\12\10\1\u0128\20\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\13\10\1\u0129\17\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\13\10\1\u012a\17\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\2\10\1\u012b"+
    "\30\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\10\10\1\u012c\22\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\10\10\1\u012d\22\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\15\10\1\u012e\15\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\5\10\1\u012f"+
    "\25\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\13\10\1\u0130\17\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\3\10\1\u0131\27\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\24\10\1\u0132\6\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\4\10\1\u0133"+
    "\26\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\6\10\1\u0134\24\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\5\10\1\u0135\25\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\7\10\1\u0136\23\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\16\10\1\u0137"+
    "\14\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\7\10\1\u0138\23\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\17\10\1\u0139\13\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\17\10\1\u013a\13\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\1\10\1\u013b"+
    "\31\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\13\10\1\u013c\17\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\13\10\1\u013d\17\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\6\10\1\u013e\24\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\11\10\1\u013f"+
    "\21\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\7\10\1\u0140\23\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\26\10\1\u0141\4\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\3\10\1\u0142\27\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\6\10\1\u0143"+
    "\24\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\13\10\1\u0144\17\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\4\10\1\u0145\26\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\1\10\1\u0146\31\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\24\10\1\u0147"+
    "\6\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\2\10\1\u0148\30\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\13\10\1\u0149\17\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\13\10\1\u014a\17\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\1\10\1\u014b"+
    "\31\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\10\10\1\u014c\22\10\14\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\15\10\1\u014d\15\10\14\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\6\10\1\u014e\24\10\14\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\13\10\1\u014f"+
    "\17\10\14\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\3\10\1\u0150\27\10\14\0"+
    "\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14694];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\7\1\1\11\4\1\1\11\23\1\10\11"+
    "\4\1\1\11\2\1\1\11\2\1\1\0\1\11\1\1"+
    "\2\0\1\1\1\0\3\11\1\1\1\11\1\0\1\11"+
    "\1\1\1\0\47\1\2\11\2\1\1\0\2\11\2\1"+
    "\7\11\1\0\1\1\1\11\3\1\1\0\1\11\13\1"+
    "\1\11\43\1\2\11\1\0\1\1\2\11\1\0\1\11"+
    "\1\0\7\11\214\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer strbuf = new StringBuffer(128);
  int sub_line;
  int sub_column;
  int strlit_start_line, strlit_start_column;

  private Symbol sym(short id) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), str());
  }

  private Symbol sym(short id, String value) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), value);
  }

  private Symbol sym(short id, String value, int start_line, int start_column, int len) {
    return new Symbol(id, start_line, start_column, len, value);
  }

  private String str() { return yytext(); }
  private int len() { return yylength(); }

  private void error(String msg) throws Scanner.Exception {
    throw new Scanner.Exception(yyline + 1, yycolumn + 1, msg);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CalScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CalScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 106: 
          { return sym(Terminals.ENDLAMBDA);
          }
        case 112: break;
        case 27: 
          { return sym(Terminals.DOUBLE_LITERAL, str().substring(0,len()-1));
          }
        case 113: break;
        case 107: 
          { return sym(Terminals.PROCEDURE);
          }
        case 114: break;
        case 85: 
          { return sym(Terminals.FALSE_LITERAL);
          }
        case 115: break;
        case 81: 
          { return sym(Terminals.BEGIN);
          }
        case 116: break;
        case 48: 
          { return sym(Terminals.LONG_LITERAL, str().substring(0, len()-1));
          }
        case 117: break;
        case 30: 
          { error("unterminated character literal at end of line");
          }
        case 118: break;
        case 64: 
          { return sym(Terminals.CHARACTER_LITERAL, "\\");
          }
        case 119: break;
        case 60: 
          { return sym(Terminals.MAP);
          }
        case 120: break;
        case 111: 
          { return sym(Terminals.ENDINVARIANT);
          }
        case 121: break;
        case 4: 
          { return sym(Terminals.MULT);
          }
        case 122: break;
        case 6: 
          { return sym(Terminals.BAR);
          }
        case 123: break;
        case 101: 
          { return sym(Terminals.FUNCTION);
          }
        case 124: break;
        case 37: 
          { return sym(Terminals.ARROW);
          }
        case 125: break;
        case 26: 
          { return sym(Terminals.LONG_LITERAL, str().substring(0,len()-1));
          }
        case 126: break;
        case 98: 
          { return sym(Terminals.ENDACTOR);
          }
        case 127: break;
        case 86: 
          { return sym(Terminals.MULTI);
          }
        case 128: break;
        case 19: 
          { return sym(Terminals.GT);
          }
        case 129: break;
        case 103: 
          { return sym(Terminals.INVARIANT);
          }
        case 130: break;
        case 22: 
          { error("unterminated string at end of line");
          }
        case 131: break;
        case 77: 
          { return sym(Terminals.ELSE);
          }
        case 132: break;
        case 104: 
          { return sym(Terminals.ENDACTION);
          }
        case 133: break;
        case 20: 
          { return sym(Terminals.EQ);
          }
        case 134: break;
        case 43: 
          { strbuf.append( '\t' );
          }
        case 135: break;
        case 71: 
          { return sym(Terminals.CHARACTER_LITERAL, "\b");
          }
        case 136: break;
        case 21: 
          { strbuf.append(str());
          }
        case 137: break;
        case 80: 
          { return sym(Terminals.CONST);
          }
        case 138: break;
        case 12: 
          { return sym(Terminals.RPAREN);
          }
        case 139: break;
        case 34: 
          { return sym(Terminals.DO);
          }
        case 140: break;
        case 55: 
          { return sym(Terminals.LET);
          }
        case 141: break;
        case 76: 
          { return sym(Terminals.NULL_LITERAL);
          }
        case 142: break;
        case 49: 
          { yypushback(2); return sym(Terminals.INTEGER_LITERAL);
          }
        case 143: break;
        case 74: 
          { return sym(Terminals.TRUE_LITERAL);
          }
        case 144: break;
        case 84: 
          { return sym(Terminals.DELAY);
          }
        case 145: break;
        case 56: 
          { return sym(Terminals.END);
          }
        case 146: break;
        case 59: 
          { return sym(Terminals.VAR);
          }
        case 147: break;
        case 65: 
          { int val = Integer.parseInt(str().substring(2,len()-1),8);
                                         return sym(Terminals.CHARACTER_LITERAL, new Character((char)val).toString());
          }
        case 148: break;
        case 72: 
          { return sym(Terminals.CHARACTER_LITERAL, "\f");
          }
        case 149: break;
        case 63: 
          { yypushback(2); return sym(Terminals.FLOATING_POINT_LITERAL);
          }
        case 150: break;
        case 44: 
          { strbuf.append( '\n' );
          }
        case 151: break;
        case 83: 
          { return sym(Terminals.GUARD);
          }
        case 152: break;
        case 54: 
          { return sym(Terminals.OLD);
          }
        case 153: break;
        case 61: 
          { return sym(Terminals.EDGE);
          }
        case 154: break;
        case 93: 
          { return sym(Terminals.LAMBDA);
          }
        case 155: break;
        case 52: 
          { return sym(Terminals.ANY);
          }
        case 156: break;
        case 32: 
          { return sym(Terminals.IN);
          }
        case 157: break;
        case 40: 
          { strbuf.append((char)Integer.parseInt(str().substring(1),8));
          }
        case 158: break;
        case 109: 
          { return sym(Terminals.ENDFOREACH);
          }
        case 159: break;
        case 99: 
          { return sym(Terminals.ENDWHILE);
          }
        case 160: break;
        case 11: 
          { return sym(Terminals.LPAREN);
          }
        case 161: break;
        case 96: 
          { return sym(Terminals.FOREACH);
          }
        case 162: break;
        case 35: 
          { return sym(Terminals.DOUBLECOLON);
          }
        case 163: break;
        case 25: 
          { return sym(Terminals.DOUBLE_LITERAL);
          }
        case 164: break;
        case 29: 
          { return sym(Terminals.OPERATOR);
          }
        case 165: break;
        case 69: 
          { return sym(Terminals.CHARACTER_LITERAL, "\n");
          }
        case 166: break;
        case 88: 
          { return sym(Terminals.ACTION);
          }
        case 167: break;
        case 67: 
          { return sym(Terminals.CHARACTER_LITERAL, "\"");
          }
        case 168: break;
        case 79: 
          { return sym(Terminals.ACTOR);
          }
        case 169: break;
        case 17: 
          { return sym(Terminals.SEMICOLON);
          }
        case 170: break;
        case 110: 
          { return sym(Terminals.ENDSCHEDULE);
          }
        case 171: break;
        case 16: 
          { return sym(Terminals.RBRACK);
          }
        case 172: break;
        case 38: 
          { error("illegal escape sequence \""+str()+"\"");
          }
        case 173: break;
        case 90: 
          { return sym(Terminals.IMPORT);
          }
        case 174: break;
        case 45: 
          { strbuf.append( '\r' );
          }
        case 175: break;
        case 46: 
          { strbuf.append( '\b' );
          }
        case 176: break;
        case 3: 
          { // Some legal operator names are used in other parts of the language. Detect them.
                                   if(str().startsWith("->")){          // used by maps, "a->-b" is "a", "->", "-", "b"
                                     yypushback(str().length()-2);
                                     return sym(Terminals.ARROW, "->");
                                   }
                                   return sym(Terminals.OPERATOR);
          }
        case 177: break;
        case 7: 
          { return sym(Terminals.INTEGER_LITERAL);
          }
        case 178: break;
        case 1: 
          { error("illegal character \""+str()+ "\"");
          }
        case 179: break;
        case 75: 
          { return sym(Terminals.THEN);
          }
        case 180: break;
        case 70: 
          { return sym(Terminals.CHARACTER_LITERAL, "\r");
          }
        case 181: break;
        case 92: 
          { return sym(Terminals.REPEAT);
          }
        case 182: break;
        case 33: 
          { return sym(Terminals.IF);
          }
        case 183: break;
        case 62: 
          { return sym(Terminals.PORTCONN);
          }
        case 184: break;
        case 105: 
          { return sym(Terminals.ENDCHOOSE);
          }
        case 185: break;
        case 42: 
          { strbuf.append( '\"' );
          }
        case 186: break;
        case 97: 
          { return sym(Terminals.MUTABLE);
          }
        case 187: break;
        case 66: 
          { return sym(Terminals.CHARACTER_LITERAL, "\'");
          }
        case 188: break;
        case 68: 
          { return sym(Terminals.CHARACTER_LITERAL, "\t");
          }
        case 189: break;
        case 10: 
          { return sym(Terminals.COLON);
          }
        case 190: break;
        case 57: 
          { return sym(Terminals.FOR);
          }
        case 191: break;
        case 41: 
          { strbuf.append( '\'' );
          }
        case 192: break;
        case 78: 
          { return sym(Terminals.PROC);
          }
        case 193: break;
        case 39: 
          { strbuf.append( '\\' );
          }
        case 194: break;
        case 24: 
          { return  sym(Terminals.IDENTIFIER, str().substring(1,len()-1));
          }
        case 195: break;
        case 14: 
          { return sym(Terminals.RBRACE);
          }
        case 196: break;
        case 53: 
          { return sym(Terminals.ALL);
          }
        case 197: break;
        case 82: 
          { return sym(Terminals.ENDIF);
          }
        case 198: break;
        case 50: 
          { return sym(Terminals.CHARACTER_LITERAL, str().substring(1, len()-1));
          }
        case 199: break;
        case 15: 
          { return sym(Terminals.LBRACK);
          }
        case 200: break;
        case 51: 
          { return sym(Terminals.ATSTAR);
          }
        case 201: break;
        case 100: 
          { return sym(Terminals.SCHEDULE);
          }
        case 202: break;
        case 87: 
          { return sym(Terminals.WHILE);
          }
        case 203: break;
        case 47: 
          { strbuf.append( '\f' );
          }
        case 204: break;
        case 18: 
          { return sym(Terminals.COMMA);
          }
        case 205: break;
        case 94: 
          { return sym(Terminals.ENDLET);
          }
        case 206: break;
        case 5: 
          { return sym(Terminals.IDENTIFIER);
          }
        case 207: break;
        case 95: 
          { return sym(Terminals.ENDPROC);
          }
        case 208: break;
        case 73: 
          { return sym(Terminals.TIME);
          }
        case 209: break;
        case 102: 
          { return sym(Terminals.PRIORITY);
          }
        case 210: break;
        case 9: 
          { yybegin(STRING); 
                                   // remember start position of string literal so we can
                                   // set its position correctly in the end
                                   strlit_start_line = yyline+1;
                                   strlit_start_column = yycolumn+1;
                                   strbuf.setLength(0);
          }
        case 211: break;
        case 91: 
          { return sym(Terminals.REGEXP);
          }
        case 212: break;
        case 13: 
          { return sym(Terminals.LBRACE);
          }
        case 213: break;
        case 58: 
          { return sym(Terminals.FSM);
          }
        case 214: break;
        case 23: 
          { yybegin(YYINITIAL); 
                                   return sym(Terminals.STRING_LITERAL, strbuf.toString(), strlit_start_line, strlit_start_column, strbuf.length()+2);
          }
        case 215: break;
        case 108: 
          { return sym(Terminals.INITIALIZE);
          }
        case 216: break;
        case 31: 
          { return sym(Terminals.AT);
          }
        case 217: break;
        case 28: 
          { return sym(Terminals.FLOATING_POINT_LITERAL, str().substring(0,len()-1));
          }
        case 218: break;
        case 8: 
          { return sym(Terminals.DOT);
          }
        case 219: break;
        case 89: 
          { return sym(Terminals.CHOOSE);
          }
        case 220: break;
        case 2: 
          { 
          }
        case 221: break;
        case 36: 
          { return sym(Terminals.COLONEQ);
          }
        case 222: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return sym(Terminals.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
